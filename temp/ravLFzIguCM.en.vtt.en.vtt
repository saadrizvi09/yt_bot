WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:02.790 align:start position:0%
 
CP<00:00:01.079><c> A</c><00:00:01.240><c> statically</c><00:00:01.760><c> typed</c><00:00:02.080><c> general</c><00:00:02.480><c> purpose</c>

00:00:02.790 --> 00:00:02.800 align:start position:0%
CP A statically typed general purpose
 

00:00:02.800 --> 00:00:04.390 align:start position:0%
CP A statically typed general purpose
programming<00:00:03.240><c> language</c><00:00:03.719><c> famous</c><00:00:04.000><c> for</c><00:00:04.200><c> being</c>

00:00:04.390 --> 00:00:04.400 align:start position:0%
programming language famous for being
 

00:00:04.400 --> 00:00:06.030 align:start position:0%
programming language famous for being
the<00:00:04.520><c> Workhorse</c><00:00:05.040><c> of</c><00:00:05.200><c> the</c><00:00:05.319><c> windows.net</c>

00:00:06.030 --> 00:00:06.040 align:start position:0%
the Workhorse of the windows.net
 

00:00:06.040 --> 00:00:07.630 align:start position:0%
the Workhorse of the windows.net
framework<00:00:06.680><c> it</c><00:00:06.759><c> was</c><00:00:06.919><c> created</c><00:00:07.240><c> in</c><00:00:07.359><c> the</c><00:00:07.439><c> year</c>

00:00:07.630 --> 00:00:07.640 align:start position:0%
framework it was created in the year
 

00:00:07.640 --> 00:00:10.470 align:start position:0%
framework it was created in the year
2000<00:00:08.360><c> by</c><00:00:08.480><c> Anders</c><00:00:08.880><c> hilburg</c><00:00:09.519><c> at</c><00:00:09.719><c> Microsoft</c><00:00:10.400><c> it</c>

00:00:10.470 --> 00:00:10.480 align:start position:0%
2000 by Anders hilburg at Microsoft it
 

00:00:10.480 --> 00:00:12.390 align:start position:0%
2000 by Anders hilburg at Microsoft it
was<00:00:10.679><c> designed</c><00:00:11.120><c> as</c><00:00:11.240><c> a</c><00:00:11.440><c> modern</c><00:00:11.840><c> sealike</c>

00:00:12.390 --> 00:00:12.400 align:start position:0%
was designed as a modern sealike
 

00:00:12.400 --> 00:00:14.190 align:start position:0%
was designed as a modern sealike
objectoriented<00:00:13.400><c> language</c><00:00:13.880><c> and</c><00:00:14.000><c> was</c>

00:00:14.190 --> 00:00:14.200 align:start position:0%
objectoriented language and was
 

00:00:14.200 --> 00:00:15.749 align:start position:0%
objectoriented language and was
originally<00:00:14.599><c> going</c><00:00:14.759><c> to</c><00:00:14.839><c> be</c><00:00:14.960><c> called</c><00:00:15.240><c> cool</c>

00:00:15.749 --> 00:00:15.759 align:start position:0%
originally going to be called cool
 

00:00:15.759 --> 00:00:18.109 align:start position:0%
originally going to be called cool
initially<00:00:16.240><c> it</c><00:00:16.359><c> was</c><00:00:16.560><c> criticized</c><00:00:17.240><c> as</c><00:00:17.520><c> imitation</c>

00:00:18.109 --> 00:00:18.119 align:start position:0%
initially it was criticized as imitation
 

00:00:18.119 --> 00:00:19.990 align:start position:0%
initially it was criticized as imitation
Java<00:00:18.680><c> but</c><00:00:18.800><c> it's</c><00:00:19.000><c> evolved</c><00:00:19.439><c> into</c><00:00:19.640><c> one</c><00:00:19.760><c> of</c><00:00:19.880><c> the</c>

00:00:19.990 --> 00:00:20.000 align:start position:0%
Java but it's evolved into one of the
 

00:00:20.000 --> 00:00:22.070 align:start position:0%
Java but it's evolved into one of the
most<00:00:20.279><c> popular</c><00:00:20.680><c> and</c><00:00:20.880><c> well-</c><00:00:21.160><c> Lov</c><00:00:21.400><c> languages</c><00:00:21.840><c> to</c>

00:00:22.070 --> 00:00:22.080 align:start position:0%
most popular and well- Lov languages to
 

00:00:22.080 --> 00:00:23.710 align:start position:0%
most popular and well- Lov languages to
this<00:00:22.240><c> day</c><00:00:22.519><c> it</c><00:00:22.640><c> can</c><00:00:22.760><c> be</c><00:00:22.880><c> used</c><00:00:23.119><c> to</c><00:00:23.240><c> build</c><00:00:23.480><c> almost</c>

00:00:23.710 --> 00:00:23.720 align:start position:0%
this day it can be used to build almost
 

00:00:23.720 --> 00:00:26.150 align:start position:0%
this day it can be used to build almost
anything<00:00:24.279><c> like</c><00:00:24.480><c> desktop</c><00:00:24.960><c> apps</c><00:00:25.160><c> on</c><00:00:25.599><c> net</c><00:00:25.800><c> core</c>

00:00:26.150 --> 00:00:26.160 align:start position:0%
anything like desktop apps on net core
 

00:00:26.160 --> 00:00:28.269 align:start position:0%
anything like desktop apps on net core
crossplatform<00:00:26.679><c> mobile</c><00:00:27.199><c> apps</c><00:00:27.439><c> with</c><00:00:27.599><c> zamarin</c>

00:00:28.269 --> 00:00:28.279 align:start position:0%
crossplatform mobile apps with zamarin
 

00:00:28.279 --> 00:00:30.390 align:start position:0%
crossplatform mobile apps with zamarin
web<00:00:28.519><c> applications</c><00:00:29.080><c> with</c><00:00:29.240><c> Blazer</c><00:00:29.800><c> and</c><00:00:30.119><c> video</c>

00:00:30.390 --> 00:00:30.400 align:start position:0%
web applications with Blazer and video
 

00:00:30.400 --> 00:00:32.310 align:start position:0%
web applications with Blazer and video
games<00:00:30.759><c> with</c><00:00:30.880><c> the</c><00:00:31.000><c> unity</c><00:00:31.359><c> framework</c><00:00:31.920><c> it</c><00:00:32.000><c> became</c>

00:00:32.310 --> 00:00:32.320 align:start position:0%
games with the unity framework it became
 

00:00:32.320 --> 00:00:34.430 align:start position:0%
games with the unity framework it became
open<00:00:32.559><c> source</c><00:00:32.880><c> software</c><00:00:33.200><c> in</c><00:00:33.320><c> 2014</c><00:00:34.120><c> and</c><00:00:34.239><c> can</c><00:00:34.360><c> be</c>

00:00:34.430 --> 00:00:34.440 align:start position:0%
open source software in 2014 and can be
 

00:00:34.440 --> 00:00:36.270 align:start position:0%
open source software in 2014 and can be
used<00:00:34.680><c> to</c><00:00:34.760><c> build</c><00:00:35.000><c> apps</c><00:00:35.280><c> outside</c><00:00:35.600><c> of</c><00:00:35.719><c> the</c><00:00:36.079><c> Net</c>

00:00:36.270 --> 00:00:36.280 align:start position:0%
used to build apps outside of the Net
 

00:00:36.280 --> 00:00:38.430 align:start position:0%
used to build apps outside of the Net
Framework<00:00:36.800><c> C</c><00:00:37.280><c> code</c><00:00:37.520><c> is</c><00:00:37.680><c> compiled</c><00:00:38.079><c> into</c><00:00:38.320><c> an</c>

00:00:38.430 --> 00:00:38.440 align:start position:0%
Framework C code is compiled into an
 

00:00:38.440 --> 00:00:40.110 align:start position:0%
Framework C code is compiled into an
intermediate<00:00:39.000><c> language</c><00:00:39.520><c> which</c><00:00:39.640><c> can</c><00:00:39.800><c> then</c><00:00:39.960><c> be</c>

00:00:40.110 --> 00:00:40.120 align:start position:0%
intermediate language which can then be
 

00:00:40.120 --> 00:00:41.549 align:start position:0%
intermediate language which can then be
interpreted<00:00:40.719><c> by</c><00:00:40.840><c> the</c><00:00:40.960><c> common</c><00:00:41.239><c> language</c>

00:00:41.549 --> 00:00:41.559 align:start position:0%
interpreted by the common language
 

00:00:41.559 --> 00:00:43.430 align:start position:0%
interpreted by the common language
runtime<00:00:42.200><c> where</c><00:00:42.320><c> it</c><00:00:42.399><c> can</c><00:00:42.520><c> be</c><00:00:42.760><c> executed</c><00:00:43.280><c> as</c>

00:00:43.430 --> 00:00:43.440 align:start position:0%
runtime where it can be executed as
 

00:00:43.440 --> 00:00:45.430 align:start position:0%
runtime where it can be executed as
native<00:00:43.760><c> machine</c><00:00:44.079><c> code</c><00:00:44.480><c> on</c><00:00:44.680><c> any</c><00:00:44.960><c> operating</c>

00:00:45.430 --> 00:00:45.440 align:start position:0%
native machine code on any operating
 

00:00:45.440 --> 00:00:47.350 align:start position:0%
native machine code on any operating
system<00:00:45.840><c> without</c><00:00:46.120><c> the</c><00:00:46.239><c> need</c><00:00:46.399><c> to</c><00:00:46.600><c> recompile</c>

00:00:47.350 --> 00:00:47.360 align:start position:0%
system without the need to recompile
 

00:00:47.360 --> 00:00:48.549 align:start position:0%
system without the need to recompile
it's<00:00:47.480><c> known</c><00:00:47.800><c> primarily</c><00:00:48.280><c> as</c><00:00:48.360><c> an</c>

00:00:48.549 --> 00:00:48.559 align:start position:0%
it's known primarily as an
 

00:00:48.559 --> 00:00:50.389 align:start position:0%
it's known primarily as an
objectoriented<00:00:49.360><c> language</c><00:00:49.960><c> but</c><00:00:50.160><c> also</c>

00:00:50.389 --> 00:00:50.399 align:start position:0%
objectoriented language but also
 

00:00:50.399 --> 00:00:52.270 align:start position:0%
objectoriented language but also
supports<00:00:50.840><c> functional</c><00:00:51.239><c> Lambda</c><00:00:51.640><c> expressions</c>

00:00:52.270 --> 00:00:52.280 align:start position:0%
supports functional Lambda expressions
 

00:00:52.280 --> 00:00:53.630 align:start position:0%
supports functional Lambda expressions
and<00:00:52.440><c> has</c><00:00:52.600><c> the</c><00:00:52.719><c> ability</c><00:00:53.079><c> to</c><00:00:53.280><c> write</c><00:00:53.480><c> a</c>

00:00:53.630 --> 00:00:53.640 align:start position:0%
and has the ability to write a
 

00:00:53.640 --> 00:00:55.830 align:start position:0%
and has the ability to write a
declarative<00:00:54.199><c> query</c><00:00:54.559><c> on</c><00:00:54.719><c> any</c><00:00:55.000><c> data</c><00:00:55.239><c> structure</c>

00:00:55.830 --> 00:00:55.840 align:start position:0%
declarative query on any data structure
 

00:00:55.840 --> 00:00:57.869 align:start position:0%
declarative query on any data structure
with<00:00:55.960><c> a</c><00:00:56.079><c> feature</c><00:00:56.480><c> called</c><00:00:56.760><c> link</c><00:00:57.239><c> it's</c><00:00:57.359><c> a</c><00:00:57.520><c> Memory</c>

00:00:57.869 --> 00:00:57.879 align:start position:0%
with a feature called link it's a Memory
 

00:00:57.879 --> 00:00:59.349 align:start position:0%
with a feature called link it's a Memory
safe<00:00:58.160><c> language</c><00:00:58.600><c> thanks</c><00:00:58.800><c> to</c><00:00:59.000><c> garbage</c>

00:00:59.349 --> 00:00:59.359 align:start position:0%
safe language thanks to garbage
 

00:00:59.359 --> 00:01:01.110 align:start position:0%
safe language thanks to garbage
collection<00:01:00.000><c> although</c><00:01:00.239><c> it</c><00:01:00.359><c> is</c><00:01:00.600><c> possible</c><00:01:00.960><c> to</c>

00:01:01.110 --> 00:01:01.120 align:start position:0%
collection although it is possible to
 

00:01:01.120 --> 00:01:03.069 align:start position:0%
collection although it is possible to
create<00:01:01.320><c> an</c><00:01:01.440><c> unsaved</c><00:01:01.920><c> context</c><00:01:02.480><c> if</c><00:01:02.600><c> you</c><00:01:02.680><c> want</c><00:01:02.840><c> to</c>

00:01:03.069 --> 00:01:03.079 align:start position:0%
create an unsaved context if you want to
 

00:01:03.079 --> 00:01:04.990 align:start position:0%
create an unsaved context if you want to
allocate<00:01:03.480><c> your</c><00:01:03.640><c> own</c><00:01:03.879><c> memory</c><00:01:04.239><c> with</c><00:01:04.400><c> pointers</c>

00:01:04.990 --> 00:01:05.000 align:start position:0%
allocate your own memory with pointers
 

00:01:05.000 --> 00:01:07.830 align:start position:0%
allocate your own memory with pointers
to<00:01:05.199><c> get</c><00:01:05.360><c> started</c><00:01:05.880><c> install</c><00:01:06.200><c> the</c><00:01:06.600><c> net</c><00:01:06.799><c> core</c><00:01:07.119><c> SDK</c>

00:01:07.830 --> 00:01:07.840 align:start position:0%
to get started install the net core SDK
 

00:01:07.840 --> 00:01:09.270 align:start position:0%
to get started install the net core SDK
then<00:01:08.040><c> open</c><00:01:08.240><c> the</c><00:01:08.320><c> terminal</c><00:01:08.680><c> to</c><00:01:08.840><c> an</c><00:01:08.960><c> empty</c>

00:01:09.270 --> 00:01:09.280 align:start position:0%
then open the terminal to an empty
 

00:01:09.280 --> 00:01:11.550 align:start position:0%
then open the terminal to an empty
directory<00:01:09.840><c> and</c><00:01:10.000><c> Run</c><00:01:10.520><c> net</c><00:01:10.720><c> new</c><00:01:11.040><c> to</c><00:01:11.240><c> create</c><00:01:11.439><c> a</c>

00:01:11.550 --> 00:01:11.560 align:start position:0%
directory and Run net new to create a
 

00:01:11.560 --> 00:01:13.149 align:start position:0%
directory and Run net new to create a
new<00:01:11.759><c> application</c><00:01:12.439><c> that</c><00:01:12.560><c> creates</c><00:01:12.920><c> a</c>

00:01:13.149 --> 00:01:13.159 align:start position:0%
new application that creates a
 

00:01:13.159 --> 00:01:15.630 align:start position:0%
new application that creates a
program.cs<00:01:14.159><c> file</c><00:01:14.680><c> that</c><00:01:14.840><c> Imports</c><00:01:15.240><c> the</c><00:01:15.360><c> system</c>

00:01:15.630 --> 00:01:15.640 align:start position:0%
program.cs file that Imports the system
 

00:01:15.640 --> 00:01:17.429 align:start position:0%
program.cs file that Imports the system
namespace<00:01:16.159><c> at</c><00:01:16.320><c> the</c><00:01:16.479><c> top</c><00:01:16.759><c> then</c><00:01:16.920><c> provides</c><00:01:17.240><c> a</c>

00:01:17.429 --> 00:01:17.439 align:start position:0%
namespace at the top then provides a
 

00:01:17.439 --> 00:01:19.070 align:start position:0%
namespace at the top then provides a
class<00:01:17.799><c> with</c><00:01:17.920><c> a</c><00:01:18.040><c> main</c><00:01:18.320><c> function</c><00:01:18.840><c> which</c><00:01:18.960><c> is</c>

00:01:19.070 --> 00:01:19.080 align:start position:0%
class with a main function which is
 

00:01:19.080 --> 00:01:20.630 align:start position:0%
class with a main function which is
where<00:01:19.200><c> your</c><00:01:19.360><c> code</c><00:01:19.560><c> will</c><00:01:19.720><c> start</c><00:01:20.000><c> executing</c>

00:01:20.630 --> 00:01:20.640 align:start position:0%
where your code will start executing
 

00:01:20.640 --> 00:01:22.630 align:start position:0%
where your code will start executing
declare<00:01:21.040><c> a</c><00:01:21.240><c> variable</c><00:01:21.799><c> by</c><00:01:21.920><c> starting</c><00:01:22.280><c> with</c><00:01:22.400><c> a</c>

00:01:22.630 --> 00:01:22.640 align:start position:0%
declare a variable by starting with a
 

00:01:22.640 --> 00:01:24.990 align:start position:0%
declare a variable by starting with a
type<00:01:23.000><c> followed</c><00:01:23.439><c> by</c><00:01:23.600><c> a</c><00:01:23.759><c> name</c><00:01:24.079><c> and</c><00:01:24.280><c> value</c><00:01:24.840><c> by</c>

00:01:24.990 --> 00:01:25.000 align:start position:0%
type followed by a name and value by
 

00:01:25.000 --> 00:01:27.030 align:start position:0%
type followed by a name and value by
default<00:01:25.439><c> a</c><00:01:25.640><c> value</c><00:01:25.880><c> cannot</c><00:01:26.159><c> be</c><00:01:26.280><c> null</c><00:01:26.840><c> but</c><00:01:26.960><c> you</c>

00:01:27.030 --> 00:01:27.040 align:start position:0%
default a value cannot be null but you
 

00:01:27.040 --> 00:01:28.590 align:start position:0%
default a value cannot be null but you
can<00:01:27.200><c> make</c><00:01:27.320><c> it</c><00:01:27.439><c> nullable</c><00:01:28.040><c> by</c><00:01:28.159><c> adding</c><00:01:28.439><c> a</c>

00:01:28.590 --> 00:01:28.600 align:start position:0%
can make it nullable by adding a
 

00:01:28.600 --> 00:01:30.149 align:start position:0%
can make it nullable by adding a
question<00:01:28.880><c> mark</c><00:01:29.119><c> to</c><00:01:29.240><c> the</c><00:01:29.400><c> type</c><00:01:29.720><c> now</c><00:01:30.000><c> to</c>

00:01:30.149 --> 00:01:30.159 align:start position:0%
question mark to the type now to
 

00:01:30.159 --> 00:01:32.030 align:start position:0%
question mark to the type now to
organize<00:01:30.560><c> our</c><00:01:30.720><c> code</c><00:01:31.040><c> and</c><00:01:31.200><c> share</c><00:01:31.439><c> it</c><00:01:31.600><c> in</c><00:01:31.799><c> other</c>

00:01:32.030 --> 00:01:32.040 align:start position:0%
organize our code and share it in other
 

00:01:32.040 --> 00:01:34.429 align:start position:0%
organize our code and share it in other
files<00:01:32.479><c> we</c><00:01:32.600><c> will</c><00:01:32.799><c> wrap</c><00:01:33.079><c> it</c><00:01:33.200><c> in</c><00:01:33.320><c> a</c><00:01:33.479><c> namespace</c><00:01:34.320><c> we</c>

00:01:34.429 --> 00:01:34.439 align:start position:0%
files we will wrap it in a namespace we
 

00:01:34.439 --> 00:01:35.910 align:start position:0%
files we will wrap it in a namespace we
can<00:01:34.560><c> then</c><00:01:34.720><c> create</c><00:01:34.920><c> a</c><00:01:35.040><c> new</c><00:01:35.280><c> class</c><00:01:35.560><c> inside</c><00:01:35.799><c> the</c>

00:01:35.910 --> 00:01:35.920 align:start position:0%
can then create a new class inside the
 

00:01:35.920 --> 00:01:37.749 align:start position:0%
can then create a new class inside the
namespace<00:01:36.600><c> that</c><00:01:36.720><c> has</c><00:01:36.880><c> a</c><00:01:37.040><c> Constructor</c><00:01:37.600><c> when</c>

00:01:37.749 --> 00:01:37.759 align:start position:0%
namespace that has a Constructor when
 

00:01:37.759 --> 00:01:39.469 align:start position:0%
namespace that has a Constructor when
the<00:01:37.960><c> class</c><00:01:38.200><c> is</c><00:01:38.360><c> instantiated</c><00:01:39.159><c> and</c><00:01:39.320><c> a</c>

00:01:39.469 --> 00:01:39.479 align:start position:0%
the class is instantiated and a
 

00:01:39.479 --> 00:01:41.230 align:start position:0%
the class is instantiated and a
Destructor<00:01:40.200><c> when</c><00:01:40.360><c> the</c><00:01:40.520><c> class</c><00:01:40.720><c> goes</c><00:01:40.920><c> out</c><00:01:41.079><c> of</c>

00:01:41.230 --> 00:01:41.240 align:start position:0%
Destructor when the class goes out of
 

00:01:41.240 --> 00:01:43.109 align:start position:0%
Destructor when the class goes out of
scope<00:01:41.720><c> classes</c><00:01:42.040><c> support</c><00:01:42.399><c> inheritance</c>

00:01:43.109 --> 00:01:43.119 align:start position:0%
scope classes support inheritance
 

00:01:43.119 --> 00:01:44.910 align:start position:0%
scope classes support inheritance
polymorphism<00:01:44.119><c> and</c><00:01:44.320><c> everything</c><00:01:44.640><c> else</c><00:01:44.840><c> you</c>

00:01:44.910 --> 00:01:44.920 align:start position:0%
polymorphism and everything else you
 

00:01:44.920 --> 00:01:46.950 align:start position:0%
polymorphism and everything else you
would<00:01:45.119><c> expect</c><00:01:45.439><c> in</c><00:01:45.560><c> a</c><00:01:45.680><c> modern</c><00:01:46.159><c> object-oriented</c>

00:01:46.950 --> 00:01:46.960 align:start position:0%
would expect in a modern object-oriented
 

00:01:46.960 --> 00:01:49.069 align:start position:0%
would expect in a modern object-oriented
language<00:01:47.520><c> we</c><00:01:47.640><c> can</c><00:01:47.799><c> define</c><00:01:48.119><c> a</c><00:01:48.399><c> property</c><00:01:48.719><c> on</c><00:01:48.880><c> the</c>

00:01:49.069 --> 00:01:49.079 align:start position:0%
language we can define a property on the
 

00:01:49.079 --> 00:01:51.030 align:start position:0%
language we can define a property on the
class<00:01:49.439><c> and</c><00:01:49.560><c> make</c><00:01:49.680><c> it</c><00:01:49.840><c> readable</c><00:01:50.280><c> with</c><00:01:50.520><c> get</c><00:01:50.840><c> or</c>

00:01:51.030 --> 00:01:51.040 align:start position:0%
class and make it readable with get or
 

00:01:51.040 --> 00:01:52.830 align:start position:0%
class and make it readable with get or
writable<00:01:51.600><c> with</c><00:01:51.719><c> set</c><00:01:52.079><c> the</c><00:01:52.240><c> language</c><00:01:52.560><c> doesn't</c>

00:01:52.830 --> 00:01:52.840 align:start position:0%
writable with set the language doesn't
 

00:01:52.840 --> 00:01:54.550 align:start position:0%
writable with set the language doesn't
have<00:01:53.040><c> top</c><00:01:53.280><c> level</c><00:01:53.520><c> functions</c><00:01:54.119><c> but</c><00:01:54.280><c> rather</c>

00:01:54.550 --> 00:01:54.560 align:start position:0%
have top level functions but rather
 

00:01:54.560 --> 00:01:56.429 align:start position:0%
have top level functions but rather
methods<00:01:55.040><c> that</c><00:01:55.119><c> are</c><00:01:55.320><c> defined</c><00:01:55.719><c> as</c><00:01:55.840><c> a</c><00:01:56.000><c> member</c><00:01:56.320><c> of</c>

00:01:56.429 --> 00:01:56.439 align:start position:0%
methods that are defined as a member of
 

00:01:56.439 --> 00:01:58.709 align:start position:0%
methods that are defined as a member of
a<00:01:56.680><c> class</c><00:01:57.240><c> however</c><00:01:57.640><c> it</c><00:01:57.759><c> does</c><00:01:57.960><c> support</c><00:01:58.320><c> Lambda</c>

00:01:58.709 --> 00:01:58.719 align:start position:0%
a class however it does support Lambda
 

00:01:58.719 --> 00:02:00.870 align:start position:0%
a class however it does support Lambda
expressions<00:01:59.200><c> or</c><00:01:59.399><c> anonymous</c><00:02:00.079><c> functions</c><00:02:00.640><c> and</c>

00:02:00.870 --> 00:02:00.880 align:start position:0%
expressions or anonymous functions and
 

00:02:00.880 --> 00:02:02.630 align:start position:0%
expressions or anonymous functions and
other<00:02:01.159><c> functional</c><00:02:01.600><c> programming</c><00:02:02.039><c> patterns</c>

00:02:02.630 --> 00:02:02.640 align:start position:0%
other functional programming patterns
 

00:02:02.640 --> 00:02:03.870 align:start position:0%
other functional programming patterns
when<00:02:02.719><c> it</c><00:02:02.840><c> comes</c><00:02:03.039><c> to</c><00:02:03.240><c> asynchronous</c>

00:02:03.870 --> 00:02:03.880 align:start position:0%
when it comes to asynchronous
 

00:02:03.880 --> 00:02:05.789 align:start position:0%
when it comes to asynchronous
programming<00:02:04.479><c> it</c><00:02:04.600><c> supports</c><00:02:05.000><c> a</c><00:02:05.200><c> task</c><00:02:05.479><c> based</c>

00:02:05.789 --> 00:02:05.799 align:start position:0%
programming it supports a task based
 

00:02:05.799 --> 00:02:07.429 align:start position:0%
programming it supports a task based
asynchronous<00:02:06.399><c> pattern</c><00:02:06.880><c> allowing</c><00:02:07.159><c> you</c><00:02:07.280><c> to</c>

00:02:07.429 --> 00:02:07.439 align:start position:0%
asynchronous pattern allowing you to
 

00:02:07.439 --> 00:02:09.589 align:start position:0%
asynchronous pattern allowing you to
write<00:02:07.680><c> nonblocking</c><00:02:08.319><c> code</c><00:02:08.720><c> using</c><00:02:09.000><c> the</c><00:02:09.160><c> async</c>

00:02:09.589 --> 00:02:09.599 align:start position:0%
write nonblocking code using the async
 

00:02:09.599 --> 00:02:12.110 align:start position:0%
write nonblocking code using the async
await<00:02:10.000><c> syntax</c><00:02:10.640><c> now</c><00:02:10.800><c> to</c><00:02:11.000><c> compile</c><00:02:11.480><c> and</c><00:02:11.720><c> execute</c>

00:02:12.110 --> 00:02:12.120 align:start position:0%
await syntax now to compile and execute
 

00:02:12.120 --> 00:02:14.309 align:start position:0%
await syntax now to compile and execute
your<00:02:12.280><c> code</c><00:02:12.599><c> use</c><00:02:12.800><c> the</c><00:02:13.239><c> net</c><00:02:13.400><c> run</c><00:02:13.680><c> command</c><00:02:14.239><c> this</c>

00:02:14.309 --> 00:02:14.319 align:start position:0%
your code use the net run command this
 

00:02:14.319 --> 00:02:17.030 align:start position:0%
your code use the net run command this
has<00:02:14.480><c> been</c><00:02:14.640><c> C</c><00:02:15.319><c> in</c><00:02:15.680><c> 100</c><00:02:16.040><c> seconds</c><00:02:16.599><c> hit</c><00:02:16.720><c> the</c><00:02:16.840><c> like</c>

00:02:17.030 --> 00:02:17.040 align:start position:0%
has been C in 100 seconds hit the like
 

00:02:17.040 --> 00:02:18.470 align:start position:0%
has been C in 100 seconds hit the like
button<00:02:17.280><c> and</c><00:02:17.480><c> subscribe</c><00:02:17.959><c> if</c><00:02:18.040><c> you</c><00:02:18.120><c> want</c><00:02:18.200><c> to</c><00:02:18.319><c> see</c>

00:02:18.470 --> 00:02:18.480 align:start position:0%
button and subscribe if you want to see
 

00:02:18.480 --> 00:02:20.150 align:start position:0%
button and subscribe if you want to see
more<00:02:18.599><c> short</c><00:02:18.879><c> videos</c><00:02:19.280><c> like</c><00:02:19.480><c> this</c><00:02:19.800><c> and</c><00:02:19.920><c> let</c><00:02:20.040><c> me</c>

00:02:20.150 --> 00:02:20.160 align:start position:0%
more short videos like this and let me
 

00:02:20.160 --> 00:02:21.309 align:start position:0%
more short videos like this and let me
know<00:02:20.280><c> in</c><00:02:20.360><c> the</c><00:02:20.480><c> comments</c><00:02:20.800><c> if</c><00:02:20.879><c> you</c><00:02:20.959><c> want</c><00:02:21.080><c> to</c><00:02:21.160><c> see</c>

00:02:21.309 --> 00:02:21.319 align:start position:0%
know in the comments if you want to see
 

00:02:21.319 --> 00:02:23.790 align:start position:0%
know in the comments if you want to see
a<00:02:21.440><c> fullnet</c><00:02:22.280><c> or</c><00:02:22.480><c> Unity</c><00:02:22.879><c> tutorial</c><00:02:23.440><c> thanks</c><00:02:23.640><c> for</c>

00:02:23.790 --> 00:02:23.800 align:start position:0%
a fullnet or Unity tutorial thanks for
 

00:02:23.800 --> 00:02:25.710 align:start position:0%
a fullnet or Unity tutorial thanks for
watching<00:02:24.360><c> and</c><00:02:24.519><c> I</c><00:02:24.640><c> will</c><00:02:24.800><c> see</c><00:02:25.000><c> you</c><00:02:25.239><c> in</c><00:02:25.360><c> the</c><00:02:25.519><c> next</c>

00:02:25.710 --> 00:02:25.720 align:start position:0%
watching and I will see you in the next
 

00:02:25.720 --> 00:02:28.640 align:start position:0%
watching and I will see you in the next
one

