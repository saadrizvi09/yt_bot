1
00:00:00,120 --> 00:00:02,550

C A statically typed procedural

2
00:00:02,550 --> 00:00:02,560
C A statically typed procedural
 

3
00:00:02,560 --> 00:00:04,470
C A statically typed procedural
programming language famous for making

4
00:00:04,470 --> 00:00:04,480
programming language famous for making
 

5
00:00:04,480 --> 00:00:06,470
programming language famous for making
the world go around it's the language

6
00:00:06,470 --> 00:00:06,480
the world go around it's the language
 

7
00:00:06,480 --> 00:00:08,390
the world go around it's the language
behind many tools we take for granted

8
00:00:08,390 --> 00:00:08,400
behind many tools we take for granted
 

9
00:00:08,400 --> 00:00:10,549
behind many tools we take for granted
like the windows Linux and Mac operating

10
00:00:10,549 --> 00:00:10,559
like the windows Linux and Mac operating
 

11
00:00:10,559 --> 00:00:13,549
like the windows Linux and Mac operating
system kernels databases like MySQL

12
00:00:13,549 --> 00:00:13,559
system kernels databases like MySQL
 

13
00:00:13,559 --> 00:00:15,669
system kernels databases like MySQL
interpreters for languages like python

14
00:00:15,669 --> 00:00:15,679
interpreters for languages like python
 

15
00:00:15,679 --> 00:00:17,870
interpreters for languages like python
tools like vim and git and countless

16
00:00:17,870 --> 00:00:17,880
tools like vim and git and countless
 

17
00:00:17,880 --> 00:00:20,550
tools like vim and git and countless
others it was created in 1972 by Dennis

18
00:00:20,550 --> 00:00:20,560
others it was created in 1972 by Dennis
 

19
00:00:20,560 --> 00:00:22,550
others it was created in 1972 by Dennis
Richie at Bell Labs where it would be

20
00:00:22,550 --> 00:00:22,560
Richie at Bell Labs where it would be
 

21
00:00:22,560 --> 00:00:24,429
Richie at Bell Labs where it would be
used to develop the Unix operating

22
00:00:24,429 --> 00:00:24,439
used to develop the Unix operating
 

23
00:00:24,439 --> 00:00:25,910
used to develop the Unix operating
system it would go on to become the

24
00:00:25,910 --> 00:00:25,920
system it would go on to become the
 

25
00:00:25,920 --> 00:00:27,830
system it would go on to become the
mother of all languages inspiring the

26
00:00:27,830 --> 00:00:27,840
mother of all languages inspiring the
 

27
00:00:27,840 --> 00:00:31,710
mother of all languages inspiring the
syntax of C++ CP Java JavaScript Pearl

28
00:00:31,710 --> 00:00:31,720
syntax of C++ CP Java JavaScript Pearl
 

29
00:00:31,720 --> 00:00:34,069
syntax of C++ CP Java JavaScript Pearl
and PHP just to name a few it compiles

30
00:00:34,069 --> 00:00:34,079
and PHP just to name a few it compiles
 

31
00:00:34,079 --> 00:00:35,790
and PHP just to name a few it compiles
directly to machine code and requires

32
00:00:35,790 --> 00:00:35,800
directly to machine code and requires
 

33
00:00:35,800 --> 00:00:37,990
directly to machine code and requires
minimal runtime support but is platform

34
00:00:37,990 --> 00:00:38,000
minimal runtime support but is platform
 

35
00:00:38,000 --> 00:00:39,869
minimal runtime support but is platform
dependent meaning the executable is

36
00:00:39,869 --> 00:00:39,879
dependent meaning the executable is
 

37
00:00:39,879 --> 00:00:42,069
dependent meaning the executable is
designed to run on a specific operating

38
00:00:42,069 --> 00:00:42,079
designed to run on a specific operating
 

39
00:00:42,079 --> 00:00:43,830
designed to run on a specific operating
system it's a highlevel language

40
00:00:43,830 --> 00:00:43,840
system it's a highlevel language
 

41
00:00:43,840 --> 00:00:45,510
system it's a highlevel language
designed for humans yet provides

42
00:00:45,510 --> 00:00:45,520
designed for humans yet provides
 

43
00:00:45,520 --> 00:00:47,310
designed for humans yet provides
low-level control over memory and

44
00:00:47,310 --> 00:00:47,320
low-level control over memory and
 

45
00:00:47,320 --> 00:00:49,189
low-level control over memory and
Hardware there's no garbage collector

46
00:00:49,189 --> 00:00:49,199
Hardware there's no garbage collector
 

47
00:00:49,199 --> 00:00:50,830
Hardware there's no garbage collector
instead your code needs to manage its

48
00:00:50,830 --> 00:00:50,840
instead your code needs to manage its
 

49
00:00:50,840 --> 00:00:52,590
instead your code needs to manage its
own memory when you create a variable

50
00:00:52,590 --> 00:00:52,600
own memory when you create a variable
 

51
00:00:52,600 --> 00:00:54,510
own memory when you create a variable
it's assigned an address in memory you

52
00:00:54,510 --> 00:00:54,520
it's assigned an address in memory you
 

53
00:00:54,520 --> 00:00:56,029
it's assigned an address in memory you
can store that address in another

54
00:00:56,029 --> 00:00:56,039
can store that address in another
 

55
00:00:56,039 --> 00:00:57,590
can store that address in another
variable called a pointer when the

56
00:00:57,590 --> 00:00:57,600
variable called a pointer when the
 

57
00:00:57,600 --> 00:00:59,229
variable called a pointer when the
variable is no longer needed you'll need

58
00:00:59,229 --> 00:00:59,239
variable is no longer needed you'll need
 

59
00:00:59,239 --> 00:01:01,630
variable is no longer needed you'll need
to free it to avoid memory leaks to get

60
00:01:01,630 --> 00:01:01,640
to free it to avoid memory leaks to get
 

61
00:01:01,640 --> 00:01:04,189
to free it to avoid memory leaks to get
started install a c compiler a popular

62
00:01:04,189 --> 00:01:04,199
started install a c compiler a popular
 

63
00:01:04,199 --> 00:01:07,230
started install a c compiler a popular
choice is the g c compiler or GCC create

64
00:01:07,230 --> 00:01:07,240
choice is the g c compiler or GCC create
 

65
00:01:07,240 --> 00:01:09,390
choice is the g c compiler or GCC create
a file ending in. C include any

66
00:01:09,390 --> 00:01:09,400
a file ending in. C include any
 

67
00:01:09,400 --> 00:01:11,270
a file ending in. C include any
libraries you plan to use then add a

68
00:01:11,270 --> 00:01:11,280
libraries you plan to use then add a
 

69
00:01:11,280 --> 00:01:12,950
libraries you plan to use then add a
main function to it this is where your

70
00:01:12,950 --> 00:01:12,960
main function to it this is where your
 

71
00:01:12,960 --> 00:01:14,710
main function to it this is where your
program will start executing there's no

72
00:01:14,710 --> 00:01:14,720
program will start executing there's no
 

73
00:01:14,720 --> 00:01:16,550
program will start executing there's no
function keyword and notice how it

74
00:01:16,550 --> 00:01:16,560
function keyword and notice how it
 

75
00:01:16,560 --> 00:01:18,670
function keyword and notice how it
returns an integer type a return value

76
00:01:18,670 --> 00:01:18,680
returns an integer type a return value
 

77
00:01:18,680 --> 00:01:20,670
returns an integer type a return value
of zero means success while a return

78
00:01:20,670 --> 00:01:20,680
of zero means success while a return
 

79
00:01:20,680 --> 00:01:22,550
of zero means success while a return
value of one means failure there are

80
00:01:22,550 --> 00:01:22,560
value of one means failure there are
 

81
00:01:22,560 --> 00:01:24,550
value of one means failure there are
only a few basic types in C create a

82
00:01:24,550 --> 00:01:24,560
only a few basic types in C create a
 

83
00:01:24,560 --> 00:01:26,190
only a few basic types in C create a
variable by starting with a type

84
00:01:26,190 --> 00:01:26,200
variable by starting with a type
 

85
00:01:26,200 --> 00:01:29,030
variable by starting with a type
followed by a name and value use print F

86
00:01:29,030 --> 00:01:29,040
followed by a name and value use print F
 

87
00:01:29,040 --> 00:01:30,510
followed by a name and value use print F
to print the value to the standard

88
00:01:30,510 --> 00:01:30,520
to print the value to the standard
 

89
00:01:30,520 --> 00:01:32,310
to print the value to the standard
output or put an Amper standand in front

90
00:01:32,310 --> 00:01:32,320
output or put an Amper standand in front
 

91
00:01:32,320 --> 00:01:34,550
output or put an Amper standand in front
of it to reference its address in memory

92
00:01:34,550 --> 00:01:34,560
of it to reference its address in memory
 

93
00:01:34,560 --> 00:01:36,870
of it to reference its address in memory
there's no string type but instead Char

94
00:01:36,870 --> 00:01:36,880
there's no string type but instead Char
 

95
00:01:36,880 --> 00:01:38,630
there's no string type but instead Char
which represents a one by character

96
00:01:38,630 --> 00:01:38,640
which represents a one by character
 

97
00:01:38,640 --> 00:01:40,789
which represents a one by character
stored as an integer a string can be

98
00:01:40,789 --> 00:01:40,799
stored as an integer a string can be
 

99
00:01:40,799 --> 00:01:42,630
stored as an integer a string can be
created with an array of characters each

100
00:01:42,630 --> 00:01:42,640
created with an array of characters each
 

101
00:01:42,640 --> 00:01:44,389
created with an array of characters each
letter will have its own memory address

102
00:01:44,389 --> 00:01:44,399
letter will have its own memory address
 

103
00:01:44,399 --> 00:01:46,670
letter will have its own memory address
and be terminated by a null character

104
00:01:46,670 --> 00:01:46,680
and be terminated by a null character
 

105
00:01:46,680 --> 00:01:48,270
and be terminated by a null character
another approach is to start with a

106
00:01:48,270 --> 00:01:48,280
another approach is to start with a
 

107
00:01:48,280 --> 00:01:50,310
another approach is to start with a
pointer by adding a star character in

108
00:01:50,310 --> 00:01:50,320
pointer by adding a star character in
 

109
00:01:50,320 --> 00:01:52,069
pointer by adding a star character in
front of the type then we can allocate

110
00:01:52,069 --> 00:01:52,079
front of the type then we can allocate
 

111
00:01:52,079 --> 00:01:54,429
front of the type then we can allocate
four bytes to it now assign a character

112
00:01:54,429 --> 00:01:54,439
four bytes to it now assign a character
 

113
00:01:54,439 --> 00:01:56,350
four bytes to it now assign a character
to each index ending with the null

114
00:01:56,350 --> 00:01:56,360
to each index ending with the null
 

115
00:01:56,360 --> 00:01:58,069
to each index ending with the null
character to create a string when you no

116
00:01:58,069 --> 00:01:58,079
character to create a string when you no
 

117
00:01:58,079 --> 00:01:59,510
character to create a string when you no
longer need that memory allocated to

118
00:01:59,510 --> 00:01:59,520
longer need that memory allocated to
 

119
00:01:59,520 --> 00:02:01,870
longer need that memory allocated to
your program use free to release it back

120
00:02:01,870 --> 00:02:01,880
your program use free to release it back
 

121
00:02:01,880 --> 00:02:04,069
your program use free to release it back
to the computer's Ram the language is

122
00:02:04,069 --> 00:02:04,079
to the computer's Ram the language is
 

123
00:02:04,079 --> 00:02:05,709
to the computer's Ram the language is
procedural and does not support

124
00:02:05,709 --> 00:02:05,719
procedural and does not support
 

125
00:02:05,719 --> 00:02:07,630
procedural and does not support
objectoriented features although you can

126
00:02:07,630 --> 00:02:07,640
objectoriented features although you can
 

127
00:02:07,640 --> 00:02:09,669
objectoriented features although you can
create your own complex data types using

128
00:02:09,669 --> 00:02:09,679
create your own complex data types using
 

129
00:02:09,679 --> 00:02:11,710
create your own complex data types using
strs now compile your code to machine

130
00:02:11,710 --> 00:02:11,720
strs now compile your code to machine
 

131
00:02:11,720 --> 00:02:13,589
strs now compile your code to machine
instructions for your operating system

132
00:02:13,589 --> 00:02:13,599
instructions for your operating system
 

133
00:02:13,599 --> 00:02:15,869
instructions for your operating system
using the C compiler this has been the C

134
00:02:15,869 --> 00:02:15,879
using the C compiler this has been the C
 

135
00:02:15,879 --> 00:02:18,070
using the C compiler this has been the C
programming language in 100 seconds hit

136
00:02:18,070 --> 00:02:18,080
programming language in 100 seconds hit
 

137
00:02:18,080 --> 00:02:19,509
programming language in 100 seconds hit
the like button and subscribe if you

138
00:02:19,509 --> 00:02:19,519
the like button and subscribe if you
 

139
00:02:19,519 --> 00:02:21,710
the like button and subscribe if you
want to see more short videos like this

140
00:02:21,710 --> 00:02:21,720
want to see more short videos like this
 

141
00:02:21,720 --> 00:02:23,750
want to see more short videos like this
thanks for watching and I will see you

142
00:02:23,750 --> 00:02:23,760
thanks for watching and I will see you
 

143
00:02:23,760 --> 00:02:26,599
thanks for watching and I will see you
in the next one

