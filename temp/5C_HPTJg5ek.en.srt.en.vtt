WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:02.669 align:start position:0%
 
rust<00:00:00.840><c> a</c><00:00:01.000><c> memory</c><00:00:01.439><c> safe</c><00:00:01.719><c> compiled</c><00:00:02.200><c> programming</c>

00:00:02.669 --> 00:00:02.679 align:start position:0%
rust a memory safe compiled programming
 

00:00:02.679 --> 00:00:04.150 align:start position:0%
rust a memory safe compiled programming
language<00:00:03.080><c> that</c><00:00:03.240><c> delivers</c><00:00:03.679><c> highlevel</c>

00:00:04.150 --> 00:00:04.160 align:start position:0%
language that delivers highlevel
 

00:00:04.160 --> 00:00:06.269 align:start position:0%
language that delivers highlevel
Simplicity<00:00:04.839><c> with</c><00:00:05.000><c> low-level</c><00:00:05.600><c> performance</c>

00:00:06.269 --> 00:00:06.279 align:start position:0%
Simplicity with low-level performance
 

00:00:06.279 --> 00:00:07.829 align:start position:0%
Simplicity with low-level performance
it's<00:00:06.399><c> a</c><00:00:06.640><c> popular</c><00:00:07.000><c> choice</c><00:00:07.240><c> for</c><00:00:07.439><c> Building</c>

00:00:07.829 --> 00:00:07.839 align:start position:0%
it's a popular choice for Building
 

00:00:07.839 --> 00:00:09.950 align:start position:0%
it's a popular choice for Building
Systems<00:00:08.480><c> where</c><00:00:08.679><c> performance</c><00:00:09.200><c> is</c><00:00:09.480><c> absolutely</c>

00:00:09.950 --> 00:00:09.960 align:start position:0%
Systems where performance is absolutely
 

00:00:09.960 --> 00:00:12.589 align:start position:0%
Systems where performance is absolutely
critical<00:00:10.559><c> like</c><00:00:10.800><c> game</c><00:00:11.000><c> engines</c><00:00:11.599><c> databases</c><00:00:12.320><c> or</c>

00:00:12.589 --> 00:00:12.599 align:start position:0%
critical like game engines databases or
 

00:00:12.599 --> 00:00:14.509 align:start position:0%
critical like game engines databases or
operating<00:00:13.120><c> systems</c><00:00:13.679><c> and</c><00:00:13.839><c> is</c><00:00:13.960><c> an</c><00:00:14.160><c> excellent</c>

00:00:14.509 --> 00:00:14.519 align:start position:0%
operating systems and is an excellent
 

00:00:14.519 --> 00:00:16.310 align:start position:0%
operating systems and is an excellent
choice<00:00:14.799><c> when</c><00:00:15.000><c> targeting</c><00:00:15.400><c> web</c><00:00:15.639><c> assembly</c><00:00:16.199><c> it</c>

00:00:16.310 --> 00:00:16.320 align:start position:0%
choice when targeting web assembly it
 

00:00:16.320 --> 00:00:18.670 align:start position:0%
choice when targeting web assembly it
started<00:00:16.720><c> as</c><00:00:16.840><c> a</c><00:00:17.039><c> side</c><00:00:17.359><c> project</c><00:00:17.760><c> of</c><00:00:17.960><c> gr</c><00:00:18.199><c> on</c>

00:00:18.670 --> 00:00:18.680 align:start position:0%
started as a side project of gr on
 

00:00:18.680 --> 00:00:21.029 align:start position:0%
started as a side project of gr on
in<00:00:19.039><c> 2007</c><00:00:19.760><c> who</c><00:00:19.880><c> named</c><00:00:20.160><c> it</c><00:00:20.359><c> after</c><00:00:20.560><c> the</c><00:00:20.720><c> rust</c>

00:00:21.029 --> 00:00:21.039 align:start position:0%
in 2007 who named it after the rust
 

00:00:21.039 --> 00:00:23.269 align:start position:0%
in 2007 who named it after the rust
fungus<00:00:21.640><c> it</c><00:00:21.720><c> was</c><00:00:21.880><c> sponsored</c><00:00:22.279><c> by</c><00:00:22.400><c> Mozilla</c><00:00:22.920><c> in</c>

00:00:23.269 --> 00:00:23.279 align:start position:0%
fungus it was sponsored by Mozilla in
 

00:00:23.279 --> 00:00:25.390 align:start position:0%
fungus it was sponsored by Mozilla in
2009<00:00:23.920><c> and</c><00:00:24.119><c> has</c><00:00:24.240><c> been</c><00:00:24.359><c> ranked</c><00:00:24.720><c> the</c><00:00:24.840><c> most</c><00:00:25.119><c> Lov</c>

00:00:25.390 --> 00:00:25.400 align:start position:0%
2009 and has been ranked the most Lov
 

00:00:25.400 --> 00:00:27.109 align:start position:0%
2009 and has been ranked the most Lov
programming<00:00:25.840><c> language</c><00:00:26.359><c> every</c><00:00:26.599><c> year</c><00:00:26.840><c> since</c>

00:00:27.109 --> 00:00:27.119 align:start position:0%
programming language every year since
 

00:00:27.119 --> 00:00:29.349 align:start position:0%
programming language every year since
2016<00:00:28.000><c> with</c><00:00:28.119><c> its</c><00:00:28.279><c> fans</c><00:00:28.640><c> being</c><00:00:28.880><c> known</c><00:00:29.199><c> as</c>

00:00:29.349 --> 00:00:29.359 align:start position:0%
2016 with its fans being known as
 

00:00:29.359 --> 00:00:32.069 align:start position:0%
2016 with its fans being known as
restation<00:00:30.359><c> traditionally</c><00:00:31.119><c> highle</c><00:00:31.560><c> languages</c>

00:00:32.069 --> 00:00:32.079 align:start position:0%
restation traditionally highle languages
 

00:00:32.079 --> 00:00:34.270 align:start position:0%
restation traditionally highle languages
provide<00:00:32.439><c> a</c><00:00:32.640><c> garbage</c><00:00:33.040><c> collector</c><00:00:33.559><c> to</c><00:00:33.760><c> Nerf</c><00:00:34.079><c> your</c>

00:00:34.270 --> 00:00:34.280 align:start position:0%
provide a garbage collector to Nerf your
 

00:00:34.280 --> 00:00:36.190 align:start position:0%
provide a garbage collector to Nerf your
control<00:00:34.719><c> over</c><00:00:34.960><c> memory</c><00:00:35.360><c> management</c><00:00:35.960><c> while</c>

00:00:36.190 --> 00:00:36.200 align:start position:0%
control over memory management while
 

00:00:36.200 --> 00:00:38.270 align:start position:0%
control over memory management while
lower<00:00:36.520><c> level</c><00:00:36.760><c> languages</c><00:00:37.320><c> provide</c><00:00:37.640><c> functions</c>

00:00:38.270 --> 00:00:38.280 align:start position:0%
lower level languages provide functions
 

00:00:38.280 --> 00:00:40.430 align:start position:0%
lower level languages provide functions
like<00:00:38.440><c> free</c><00:00:38.840><c> and</c><00:00:39.040><c> allocate</c><00:00:39.640><c> to</c><00:00:39.800><c> shoot</c><00:00:40.079><c> yourself</c>

00:00:40.430 --> 00:00:40.440 align:start position:0%
like free and allocate to shoot yourself
 

00:00:40.440 --> 00:00:41.990 align:start position:0%
like free and allocate to shoot yourself
in<00:00:40.559><c> the</c><00:00:40.680><c> foot</c><00:00:41.079><c> rust</c><00:00:41.399><c> takes</c><00:00:41.600><c> a</c><00:00:41.719><c> different</c>

00:00:41.990 --> 00:00:42.000 align:start position:0%
in the foot rust takes a different
 

00:00:42.000 --> 00:00:43.990 align:start position:0%
in the foot rust takes a different
approach<00:00:42.520><c> it</c><00:00:42.640><c> has</c><00:00:42.800><c> no</c><00:00:43.000><c> garbage</c><00:00:43.360><c> collector</c><00:00:43.879><c> but</c>

00:00:43.990 --> 00:00:44.000 align:start position:0%
approach it has no garbage collector but
 

00:00:44.000 --> 00:00:46.029 align:start position:0%
approach it has no garbage collector but
achieves<00:00:44.360><c> memory</c><00:00:44.760><c> safety</c><00:00:45.200><c> with</c><00:00:45.320><c> a</c><00:00:45.520><c> concept</c>

00:00:46.029 --> 00:00:46.039 align:start position:0%
achieves memory safety with a concept
 

00:00:46.039 --> 00:00:48.229 align:start position:0%
achieves memory safety with a concept
known<00:00:46.399><c> as</c><00:00:46.600><c> ownership</c><00:00:47.199><c> and</c><00:00:47.360><c> borrowing</c><00:00:48.039><c> by</c>

00:00:48.229 --> 00:00:48.239 align:start position:0%
known as ownership and borrowing by
 

00:00:48.239 --> 00:00:50.150 align:start position:0%
known as ownership and borrowing by
default<00:00:48.800><c> every</c><00:00:49.079><c> variable</c><00:00:49.520><c> in</c><00:00:49.680><c> Rust</c><00:00:50.039><c> is</c>

00:00:50.150 --> 00:00:50.160 align:start position:0%
default every variable in Rust is
 

00:00:50.160 --> 00:00:52.150 align:start position:0%
default every variable in Rust is
immutable<00:00:50.920><c> this</c><00:00:51.039><c> allows</c><00:00:51.360><c> values</c><00:00:51.719><c> to</c><00:00:51.840><c> be</c><00:00:51.920><c> used</c>

00:00:52.150 --> 00:00:52.160 align:start position:0%
immutable this allows values to be used
 

00:00:52.160 --> 00:00:53.830 align:start position:0%
immutable this allows values to be used
in<00:00:52.280><c> the</c><00:00:52.399><c> stack</c><00:00:52.680><c> memory</c><00:00:53.160><c> which</c><00:00:53.280><c> has</c><00:00:53.440><c> minimal</c>

00:00:53.830 --> 00:00:53.840 align:start position:0%
in the stack memory which has minimal
 

00:00:53.840 --> 00:00:55.910 align:start position:0%
in the stack memory which has minimal
performance<00:00:54.320><c> overhead</c><00:00:55.039><c> however</c><00:00:55.399><c> mutable</c>

00:00:55.910 --> 00:00:55.920 align:start position:0%
performance overhead however mutable
 

00:00:55.920 --> 00:00:58.029 align:start position:0%
performance overhead however mutable
values<00:00:56.359><c> or</c><00:00:56.640><c> objects</c><00:00:57.000><c> with</c><00:00:57.120><c> an</c><00:00:57.280><c> unknown</c><00:00:57.760><c> size</c>

00:00:58.029 --> 00:00:58.039 align:start position:0%
values or objects with an unknown size
 

00:00:58.039 --> 00:01:00.229 align:start position:0%
values or objects with an unknown size
at<00:00:58.239><c> compile</c><00:00:58.719><c> time</c><00:00:59.079><c> are</c><00:00:59.239><c> stored</c><00:00:59.600><c> in</c><00:00:59.719><c> the</c><00:01:00.000><c> keep</c>

00:01:00.229 --> 00:01:00.239 align:start position:0%
at compile time are stored in the keep
 

00:01:00.239 --> 00:01:02.590 align:start position:0%
at compile time are stored in the keep
memory<00:01:00.840><c> every</c><00:01:01.079><c> value</c><00:01:01.399><c> in</c><00:01:01.519><c> a</c><00:01:01.640><c> rust</c><00:01:02.000><c> program</c><00:01:02.440><c> is</c>

00:01:02.590 --> 00:01:02.600 align:start position:0%
memory every value in a rust program is
 

00:01:02.600 --> 00:01:04.750 align:start position:0%
memory every value in a rust program is
assigned<00:01:02.960><c> to</c><00:01:03.120><c> a</c><00:01:03.280><c> single</c><00:01:03.680><c> variable</c><00:01:04.280><c> known</c><00:01:04.600><c> as</c>

00:01:04.750 --> 00:01:04.760 align:start position:0%
assigned to a single variable known as
 

00:01:04.760 --> 00:01:06.630 align:start position:0%
assigned to a single variable known as
its<00:01:04.920><c> owner</c><00:01:05.439><c> when</c><00:01:05.560><c> that</c><00:01:05.760><c> variable</c><00:01:06.159><c> goes</c><00:01:06.360><c> out</c><00:01:06.479><c> of</c>

00:01:06.630 --> 00:01:06.640 align:start position:0%
its owner when that variable goes out of
 

00:01:06.640 --> 00:01:08.590 align:start position:0%
its owner when that variable goes out of
scope<00:01:07.080><c> the</c><00:01:07.159><c> memory</c><00:01:07.520><c> allocated</c><00:01:08.040><c> to</c><00:01:08.200><c> it</c><00:01:08.439><c> is</c>

00:01:08.590 --> 00:01:08.600 align:start position:0%
scope the memory allocated to it is
 

00:01:08.600 --> 00:01:10.630 align:start position:0%
scope the memory allocated to it is
dropped<00:01:09.040><c> automatically</c><00:01:09.880><c> in</c><00:01:10.040><c> some</c><00:01:10.240><c> cases</c>

00:01:10.630 --> 00:01:10.640 align:start position:0%
dropped automatically in some cases
 

00:01:10.640 --> 00:01:12.230 align:start position:0%
dropped automatically in some cases
though<00:01:10.840><c> you</c><00:01:10.960><c> may</c><00:01:11.119><c> want</c><00:01:11.280><c> to</c><00:01:11.520><c> pass</c><00:01:11.680><c> a</c><00:01:11.840><c> reference</c>

00:01:12.230 --> 00:01:12.240 align:start position:0%
though you may want to pass a reference
 

00:01:12.240 --> 00:01:13.950 align:start position:0%
though you may want to pass a reference
to<00:01:12.400><c> a</c><00:01:12.560><c> different</c><00:01:12.840><c> part</c><00:01:13.000><c> of</c><00:01:13.119><c> the</c><00:01:13.280><c> program</c>

00:01:13.950 --> 00:01:13.960 align:start position:0%
to a different part of the program
 

00:01:13.960 --> 00:01:15.950 align:start position:0%
to a different part of the program
borrowing<00:01:14.600><c> allows</c><00:01:14.920><c> you</c><00:01:15.080><c> to</c><00:01:15.400><c> access</c><00:01:15.720><c> a</c>

00:01:15.950 --> 00:01:15.960 align:start position:0%
borrowing allows you to access a
 

00:01:15.960 --> 00:01:17.510 align:start position:0%
borrowing allows you to access a
reference<00:01:16.240><c> in</c><00:01:16.439><c> memory</c><00:01:16.960><c> without</c><00:01:17.240><c> taking</c>

00:01:17.510 --> 00:01:17.520 align:start position:0%
reference in memory without taking
 

00:01:17.520 --> 00:01:19.469 align:start position:0%
reference in memory without taking
ownership<00:01:18.080><c> of</c><00:01:18.200><c> it</c><00:01:18.479><c> there</c><00:01:18.600><c> are</c><00:01:18.759><c> a</c><00:01:18.880><c> ton</c><00:01:19.080><c> of</c><00:01:19.200><c> rules</c>

00:01:19.469 --> 00:01:19.479 align:start position:0%
ownership of it there are a ton of rules
 

00:01:19.479 --> 00:01:21.429 align:start position:0%
ownership of it there are a ton of rules
to<00:01:19.600><c> go</c><00:01:19.759><c> along</c><00:01:20.000><c> with</c><00:01:20.159><c> the</c><00:01:20.360><c> system</c><00:01:20.840><c> that</c><00:01:20.960><c> the</c><00:01:21.040><c> r</c>

00:01:21.429 --> 00:01:21.439 align:start position:0%
to go along with the system that the r
 

00:01:21.439 --> 00:01:23.510 align:start position:0%
to go along with the system that the r
borrow<00:01:21.759><c> Checker</c><00:01:22.119><c> will</c><00:01:22.360><c> validate</c><00:01:22.840><c> at</c><00:01:23.040><c> compile</c>

00:01:23.510 --> 00:01:23.520 align:start position:0%
borrow Checker will validate at compile
 

00:01:23.520 --> 00:01:25.469 align:start position:0%
borrow Checker will validate at compile
time<00:01:23.960><c> these</c><00:01:24.119><c> rules</c><00:01:24.479><c> keep</c><00:01:24.640><c> your</c><00:01:24.759><c> code</c><00:01:25.040><c> safe</c>

00:01:25.469 --> 00:01:25.479 align:start position:0%
time these rules keep your code safe
 

00:01:25.479 --> 00:01:27.390 align:start position:0%
time these rules keep your code safe
while<00:01:25.680><c> providing</c><00:01:26.240><c> absolute</c><00:01:26.680><c> control</c><00:01:27.079><c> over</c>

00:01:27.390 --> 00:01:27.400 align:start position:0%
while providing absolute control over
 

00:01:27.400 --> 00:01:29.350 align:start position:0%
while providing absolute control over
performance<00:01:28.040><c> rust</c><00:01:28.479><c> also</c><00:01:28.720><c> has</c><00:01:28.880><c> a</c><00:01:29.079><c> package</c>

00:01:29.350 --> 00:01:29.360 align:start position:0%
performance rust also has a package
 

00:01:29.360 --> 00:01:30.950 align:start position:0%
performance rust also has a package
manager<00:01:29.680><c> called</c><00:01:30.079><c> cargo</c><00:01:30.600><c> where</c><00:01:30.759><c> each</c>

00:01:30.950 --> 00:01:30.960 align:start position:0%
manager called cargo where each
 

00:01:30.960 --> 00:01:33.069 align:start position:0%
manager called cargo where each
individual<00:01:31.520><c> package</c><00:01:31.920><c> is</c><00:01:32.079><c> a</c><00:01:32.280><c> crate</c><00:01:32.720><c> to</c><00:01:32.960><c> get</c>

00:01:33.069 --> 00:01:33.079 align:start position:0%
individual package is a crate to get
 

00:01:33.079 --> 00:01:35.550 align:start position:0%
individual package is a crate to get
started<00:01:33.600><c> install</c><00:01:34.000><c> rest</c><00:01:34.479><c> then</c><00:01:34.640><c> run</c><00:01:34.840><c> cargo</c><00:01:35.240><c> new</c>

00:01:35.550 --> 00:01:35.560 align:start position:0%
started install rest then run cargo new
 

00:01:35.560 --> 00:01:37.710 align:start position:0%
started install rest then run cargo new
from<00:01:35.720><c> the</c><00:01:35.840><c> command</c><00:01:36.200><c> line</c><00:01:36.520><c> in</c><00:01:36.640><c> the</c><00:01:36.759><c> main.</c><00:01:37.320><c> RS</c>

00:01:37.710 --> 00:01:37.720 align:start position:0%
from the command line in the main. RS
 

00:01:37.720 --> 00:01:39.789 align:start position:0%
from the command line in the main. RS
file<00:01:38.119><c> you'll</c><00:01:38.360><c> find</c><00:01:38.560><c> a</c><00:01:38.720><c> main</c><00:01:39.040><c> function</c><00:01:39.680><c> which</c>

00:01:39.789 --> 00:01:39.799 align:start position:0%
file you'll find a main function which
 

00:01:39.799 --> 00:01:41.109 align:start position:0%
file you'll find a main function which
is<00:01:39.960><c> where</c><00:01:40.119><c> the</c><00:01:40.280><c> program</c><00:01:40.680><c> will</c><00:01:40.840><c> start</c>

00:01:41.109 --> 00:01:41.119 align:start position:0%
is where the program will start
 

00:01:41.119 --> 00:01:43.469 align:start position:0%
is where the program will start
executing<00:01:41.799><c> declare</c><00:01:42.240><c> a</c><00:01:42.399><c> variable</c><00:01:42.840><c> with</c><00:01:43.040><c> let</c>

00:01:43.469 --> 00:01:43.479 align:start position:0%
executing declare a variable with let
 

00:01:43.479 --> 00:01:45.709 align:start position:0%
executing declare a variable with let
followed<00:01:43.840><c> by</c><00:01:44.000><c> its</c><00:01:44.200><c> name</c><00:01:44.600><c> and</c><00:01:44.840><c> type</c><00:01:45.280><c> the</c><00:01:45.439><c> value</c>

00:01:45.709 --> 00:01:45.719 align:start position:0%
followed by its name and type the value
 

00:01:45.719 --> 00:01:47.350 align:start position:0%
followed by its name and type the value
can't<00:01:45.960><c> be</c><00:01:46.079><c> changed</c><00:01:46.439><c> or</c><00:01:46.640><c> reassigned</c><00:01:47.200><c> by</c>

00:01:47.350 --> 00:01:47.360 align:start position:0%
can't be changed or reassigned by
 

00:01:47.360 --> 00:01:49.510 align:start position:0%
can't be changed or reassigned by
default<00:01:47.840><c> so</c><00:01:48.040><c> add</c><00:01:48.240><c> mut</c><00:01:48.560><c> to</c><00:01:48.680><c> make</c><00:01:48.799><c> it</c><00:01:48.920><c> mutable</c>

00:01:49.510 --> 00:01:49.520 align:start position:0%
default so add mut to make it mutable
 

00:01:49.520 --> 00:01:51.469 align:start position:0%
default so add mut to make it mutable
the<00:01:49.640><c> name</c><00:01:49.880><c> of</c><00:01:49.960><c> the</c><00:01:50.119><c> variable</c><00:01:50.560><c> is</c><00:01:50.680><c> the</c><00:01:50.799><c> owner</c><00:01:51.280><c> a</c>

00:01:51.469 --> 00:01:51.479 align:start position:0%
the name of the variable is the owner a
 

00:01:51.479 --> 00:01:53.270 align:start position:0%
the name of the variable is the owner a
reference<00:01:51.840><c> to</c><00:01:52.000><c> its</c><00:01:52.159><c> location</c><00:01:52.520><c> and</c><00:01:52.680><c> memory</c><00:01:53.159><c> can</c>

00:01:53.270 --> 00:01:53.280 align:start position:0%
reference to its location and memory can
 

00:01:53.280 --> 00:01:54.789 align:start position:0%
reference to its location and memory can
be<00:01:53.439><c> Borrowed</c><00:01:53.880><c> by</c><00:01:54.079><c> other</c><00:01:54.280><c> parts</c><00:01:54.479><c> of</c><00:01:54.600><c> the</c>

00:01:54.789 --> 00:01:54.799 align:start position:0%
be Borrowed by other parts of the
 

00:01:54.799 --> 00:01:56.950 align:start position:0%
be Borrowed by other parts of the
program<00:01:55.399><c> by</c><00:01:55.600><c> prefixing</c><00:01:56.119><c> it</c><00:01:56.320><c> with</c><00:01:56.439><c> an</c><00:01:56.600><c> Amper</c>

00:01:56.950 --> 00:01:56.960 align:start position:0%
program by prefixing it with an Amper
 

00:01:56.960 --> 00:01:59.149 align:start position:0%
program by prefixing it with an Amper
sand<00:01:57.360><c> then</c><00:01:57.479><c> use</c><00:01:57.680><c> a</c><00:01:57.840><c> macro</c><00:01:58.240><c> like</c><00:01:58.399><c> print</c><00:01:58.640><c> line</c><00:01:58.960><c> to</c>

00:01:59.149 --> 00:01:59.159 align:start position:0%
sand then use a macro like print line to
 

00:01:59.159 --> 00:02:00.990 align:start position:0%
sand then use a macro like print line to
log<00:01:59.439><c> the</c><00:01:59.520><c> value</c><00:02:00.000><c> to</c><00:02:00.119><c> the</c><00:02:00.240><c> standard</c><00:02:00.560><c> output</c>

00:02:00.990 --> 00:02:01.000 align:start position:0%
log the value to the standard output
 

00:02:01.000 --> 00:02:02.990 align:start position:0%
log the value to the standard output
rust<00:02:01.320><c> also</c><00:02:01.560><c> comes</c><00:02:01.759><c> with</c><00:02:01.880><c> a</c><00:02:02.039><c> standard</c><00:02:02.439><c> library</c>

00:02:02.990 --> 00:02:03.000 align:start position:0%
rust also comes with a standard library
 

00:02:03.000 --> 00:02:05.429 align:start position:0%
rust also comes with a standard library
that<00:02:03.119><c> contains</c><00:02:03.560><c> modules</c><00:02:04.119><c> to</c><00:02:04.360><c> handle</c><00:02:04.759><c> IO</c><00:02:05.280><c> the</c>

00:02:05.429 --> 00:02:05.439 align:start position:0%
that contains modules to handle IO the
 

00:02:05.439 --> 00:02:07.950 align:start position:0%
that contains modules to handle IO the
file<00:02:05.799><c> system</c><00:02:06.320><c> concurrency</c><00:02:07.159><c> among</c><00:02:07.439><c> many</c><00:02:07.640><c> other</c>

00:02:07.950 --> 00:02:07.960 align:start position:0%
file system concurrency among many other
 

00:02:07.960 --> 00:02:09.710 align:start position:0%
file system concurrency among many other
things<00:02:08.399><c> now</c><00:02:08.640><c> compile</c><00:02:09.039><c> your</c><00:02:09.160><c> code</c><00:02:09.399><c> to</c><00:02:09.520><c> an</c>

00:02:09.710 --> 00:02:09.720 align:start position:0%
things now compile your code to an
 

00:02:09.720 --> 00:02:11.630 align:start position:0%
things now compile your code to an
executable<00:02:10.360><c> with</c><00:02:10.479><c> the</c><00:02:10.599><c> rust</c><00:02:10.879><c> compiler</c><00:02:11.520><c> you</c>

00:02:11.630 --> 00:02:11.640 align:start position:0%
executable with the rust compiler you
 

00:02:11.640 --> 00:02:13.750 align:start position:0%
executable with the rust compiler you
just<00:02:11.800><c> built</c><00:02:12.080><c> a</c><00:02:12.239><c> memory</c><00:02:12.599><c> safe</c><00:02:12.920><c> executable</c><00:02:13.640><c> that</c>

00:02:13.750 --> 00:02:13.760 align:start position:0%
just built a memory safe executable that
 

00:02:13.760 --> 00:02:14.990 align:start position:0%
just built a memory safe executable that
can<00:02:13.920><c> handle</c><00:02:14.200><c> the</c><00:02:14.319><c> most</c><00:02:14.519><c> performance</c>

00:02:14.990 --> 00:02:15.000 align:start position:0%
can handle the most performance
 

00:02:15.000 --> 00:02:16.990 align:start position:0%
can handle the most performance
intensive<00:02:15.480><c> system</c><00:02:15.920><c> requirements</c><00:02:16.760><c> this</c><00:02:16.879><c> has</c>

00:02:16.990 --> 00:02:17.000 align:start position:0%
intensive system requirements this has
 

00:02:17.000 --> 00:02:19.270 align:start position:0%
intensive system requirements this has
been<00:02:17.200><c> rust</c><00:02:17.599><c> in</c><00:02:18.040><c> 100</c><00:02:18.319><c> seconds</c><00:02:18.840><c> hit</c><00:02:18.959><c> the</c><00:02:19.120><c> like</c>

00:02:19.270 --> 00:02:19.280 align:start position:0%
been rust in 100 seconds hit the like
 

00:02:19.280 --> 00:02:20.830 align:start position:0%
been rust in 100 seconds hit the like
button<00:02:19.599><c> and</c><00:02:19.800><c> subscribe</c><00:02:20.280><c> if</c><00:02:20.360><c> you</c><00:02:20.440><c> want</c><00:02:20.519><c> to</c><00:02:20.640><c> see</c>

00:02:20.830 --> 00:02:20.840 align:start position:0%
button and subscribe if you want to see
 

00:02:20.840 --> 00:02:22.550 align:start position:0%
button and subscribe if you want to see
more<00:02:20.959><c> short</c><00:02:21.280><c> videos</c><00:02:21.640><c> like</c><00:02:21.840><c> this</c><00:02:22.120><c> and</c><00:02:22.239><c> leave</c><00:02:22.400><c> a</c>

00:02:22.550 --> 00:02:22.560 align:start position:0%
more short videos like this and leave a
 

00:02:22.560 --> 00:02:24.190 align:start position:0%
more short videos like this and leave a
comment<00:02:22.879><c> if</c><00:02:23.000><c> you</c><00:02:23.080><c> want</c><00:02:23.160><c> to</c><00:02:23.280><c> see</c><00:02:23.480><c> a</c><00:02:23.599><c> full</c><00:02:23.920><c> R</c>

00:02:24.190 --> 00:02:24.200 align:start position:0%
comment if you want to see a full R
 

00:02:24.200 --> 00:02:26.309 align:start position:0%
comment if you want to see a full R
tutorial<00:02:24.800><c> thanks</c><00:02:25.000><c> for</c><00:02:25.239><c> watching</c><00:02:25.800><c> and</c><00:02:26.000><c> I</c><00:02:26.080><c> will</c>

00:02:26.309 --> 00:02:26.319 align:start position:0%
tutorial thanks for watching and I will
 

00:02:26.319 --> 00:02:30.239 align:start position:0%
tutorial thanks for watching and I will
see<00:02:26.519><c> you</c><00:02:26.720><c> in</c><00:02:26.840><c> the</c><00:02:27.040><c> next</c><00:02:27.239><c> one</c>

