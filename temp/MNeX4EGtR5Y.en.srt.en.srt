1
00:00:00,640 --> 00:00:03,110

C++ a statically typed compiled

2
00:00:03,110 --> 00:00:03,120
C++ a statically typed compiled
 

3
00:00:03,120 --> 00:00:04,670
C++ a statically typed compiled
programming language famous for its

4
00:00:04,670 --> 00:00:04,680
programming language famous for its
 

5
00:00:04,680 --> 00:00:05,910
programming language famous for its
widespread use in software

6
00:00:05,910 --> 00:00:05,920
widespread use in software
 

7
00:00:05,920 --> 00:00:07,710
widespread use in software
infrastructure and Infamous for its

8
00:00:07,710 --> 00:00:07,720
infrastructure and Infamous for its
 

9
00:00:07,720 --> 00:00:09,549
infrastructure and Infamous for its
steep learning curve it was created in

10
00:00:09,549 --> 00:00:09,559
steep learning curve it was created in
 

11
00:00:09,559 --> 00:00:13,390
steep learning curve it was created in
1979 by bej Strauss at AT&T Bell Labs he

12
00:00:13,390 --> 00:00:13,400
1979 by bej Strauss at AT&T Bell Labs he
 

13
00:00:13,400 --> 00:00:15,190
1979 by bej Strauss at AT&T Bell Labs he
was inspired by the object-oriented

14
00:00:15,190 --> 00:00:15,200
was inspired by the object-oriented
 

15
00:00:15,200 --> 00:00:17,269
was inspired by the object-oriented
nature of simula but needed a language

16
00:00:17,269 --> 00:00:17,279
nature of simula but needed a language
 

17
00:00:17,279 --> 00:00:19,510
nature of simula but needed a language
with a high performance of c and thus C

18
00:00:19,510 --> 00:00:19,520
with a high performance of c and thus C
 

19
00:00:19,520 --> 00:00:21,670
with a high performance of c and thus C
with classes was born it's designed as a

20
00:00:21,670 --> 00:00:21,680
with classes was born it's designed as a
 

21
00:00:21,680 --> 00:00:23,990
with classes was born it's designed as a
suet of C which means that virtually any

22
00:00:23,990 --> 00:00:24,000
suet of C which means that virtually any
 

23
00:00:24,000 --> 00:00:26,990
suet of C which means that virtually any
c program is also a valid C++ program

24
00:00:26,990 --> 00:00:27,000
c program is also a valid C++ program
 

25
00:00:27,000 --> 00:00:28,710
c program is also a valid C++ program
but it also adds zero overhead

26
00:00:28,710 --> 00:00:28,720
but it also adds zero overhead
 

27
00:00:28,720 --> 00:00:30,790
but it also adds zero overhead
abstractions such as object-oriented

28
00:00:30,790 --> 00:00:30,800
abstractions such as object-oriented
 

29
00:00:30,800 --> 00:00:33,310
abstractions such as object-oriented
patterns like polymorphism encapsulation

30
00:00:33,310 --> 00:00:33,320
patterns like polymorphism encapsulation
 

31
00:00:33,320 --> 00:00:35,310
patterns like polymorphism encapsulation
and inheritance today it's used in a

32
00:00:35,310 --> 00:00:35,320
and inheritance today it's used in a
 

33
00:00:35,320 --> 00:00:36,990
and inheritance today it's used in a
wide variety of systems with constrained

34
00:00:36,990 --> 00:00:37,000
wide variety of systems with constrained
 

35
00:00:37,000 --> 00:00:38,910
wide variety of systems with constrained
memory demands like the Unreal Engine

36
00:00:38,910 --> 00:00:38,920
memory demands like the Unreal Engine
 

37
00:00:38,920 --> 00:00:41,270
memory demands like the Unreal Engine
for AAA video games programs like Adobe

38
00:00:41,270 --> 00:00:41,280
for AAA video games programs like Adobe
 

39
00:00:41,280 --> 00:00:42,750
for AAA video games programs like Adobe
After Effects that were used to edit

40
00:00:42,750 --> 00:00:42,760
After Effects that were used to edit
 

41
00:00:42,760 --> 00:00:45,190
After Effects that were used to edit
this video databases like MySQL and

42
00:00:45,190 --> 00:00:45,200
this video databases like MySQL and
 

43
00:00:45,200 --> 00:00:47,150
this video databases like MySQL and
mongodb embedded systems like the

44
00:00:47,150 --> 00:00:47,160
mongodb embedded systems like the
 

45
00:00:47,160 --> 00:00:48,709
mongodb embedded systems like the
display on your smart toaster and is

46
00:00:48,709 --> 00:00:48,719
display on your smart toaster and is
 

47
00:00:48,719 --> 00:00:50,389
display on your smart toaster and is
used to implement much of our low-level

48
00:00:50,389 --> 00:00:50,399
used to implement much of our low-level
 

49
00:00:50,399 --> 00:00:52,310
used to implement much of our low-level
infrastructure like language compilers

50
00:00:52,310 --> 00:00:52,320
infrastructure like language compilers
 

51
00:00:52,320 --> 00:00:54,310
infrastructure like language compilers
and virtual machines it's so popular

52
00:00:54,310 --> 00:00:54,320
and virtual machines it's so popular
 

53
00:00:54,320 --> 00:00:55,910
and virtual machines it's so popular
because it provides low-level memory and

54
00:00:55,910 --> 00:00:55,920
because it provides low-level memory and
 

55
00:00:55,920 --> 00:00:58,110
because it provides low-level memory and
Hardware control like C but with highle

56
00:00:58,110 --> 00:00:58,120
Hardware control like C but with highle
 

57
00:00:58,120 --> 00:01:00,189
Hardware control like C but with highle
abstractions like classes and Mark

58
00:01:00,189 --> 00:01:00,199
abstractions like classes and Mark
 

59
00:01:00,199 --> 00:01:02,349
abstractions like classes and Mark
pointers C++ makes it harder to shoot

60
00:01:02,349 --> 00:01:02,359
pointers C++ makes it harder to shoot
 

61
00:01:02,359 --> 00:01:03,790
pointers C++ makes it harder to shoot
yourself in the foot but when you do

62
00:01:03,790 --> 00:01:03,800
yourself in the foot but when you do
 

63
00:01:03,800 --> 00:01:06,590
yourself in the foot but when you do
it'll blow your whole leg off to get

64
00:01:06,590 --> 00:01:06,600
it'll blow your whole leg off to get
 

65
00:01:06,600 --> 00:01:09,030
it'll blow your whole leg off to get
started install a C+ plus compiler like

66
00:01:09,030 --> 00:01:09,040
started install a C+ plus compiler like
 

67
00:01:09,040 --> 00:01:11,510
started install a C+ plus compiler like
GCC or clang then create a file ending

68
00:01:11,510 --> 00:01:11,520
GCC or clang then create a file ending
 

69
00:01:11,520 --> 00:01:13,710
GCC or clang then create a file ending
in CPP include IO stream from the

70
00:01:13,710 --> 00:01:13,720
in CPP include IO stream from the
 

71
00:01:13,720 --> 00:01:15,510
in CPP include IO stream from the
standard library to handle input and

72
00:01:15,510 --> 00:01:15,520
standard library to handle input and
 

73
00:01:15,520 --> 00:01:17,310
standard library to handle input and
output your code will start executing

74
00:01:17,310 --> 00:01:17,320
output your code will start executing
 

75
00:01:17,320 --> 00:01:19,030
output your code will start executing
from the main function to print hello

76
00:01:19,030 --> 00:01:19,040
from the main function to print hello
 

77
00:01:19,040 --> 00:01:20,870
from the main function to print hello
world we simply use standard character

78
00:01:20,870 --> 00:01:20,880
world we simply use standard character
 

79
00:01:20,880 --> 00:01:22,910
world we simply use standard character
output followed by the bit y shift left

80
00:01:22,910 --> 00:01:22,920
output followed by the bit y shift left
 

81
00:01:22,920 --> 00:01:24,870
output followed by the bit y shift left
operator and a string literal we can get

82
00:01:24,870 --> 00:01:24,880
operator and a string literal we can get
 

83
00:01:24,880 --> 00:01:26,710
operator and a string literal we can get
rid of this STD though by adding a

84
00:01:26,710 --> 00:01:26,720
rid of this STD though by adding a
 

85
00:01:26,720 --> 00:01:28,590
rid of this STD though by adding a
namespace to the top of the file now if

86
00:01:28,590 --> 00:01:28,600
namespace to the top of the file now if
 

87
00:01:28,600 --> 00:01:30,310
namespace to the top of the file now if
we want to create a string variable we

88
00:01:30,310 --> 00:01:30,320
we want to create a string variable we
 

89
00:01:30,320 --> 00:01:32,389
we want to create a string variable we
can do so by typing it as an array of

90
00:01:32,389 --> 00:01:32,399
can do so by typing it as an array of
 

91
00:01:32,399 --> 00:01:34,429
can do so by typing it as an array of
characters however if we include string

92
00:01:34,429 --> 00:01:34,439
characters however if we include string
 

93
00:01:34,439 --> 00:01:36,270
characters however if we include string
from the standard Library we can use the

94
00:01:36,270 --> 00:01:36,280
from the standard Library we can use the
 

95
00:01:36,280 --> 00:01:37,990
from the standard Library we can use the
string type instead the real game

96
00:01:37,990 --> 00:01:38,000
string type instead the real game
 

97
00:01:38,000 --> 00:01:40,030
string type instead the real game
changer though is the fact that C++

98
00:01:40,030 --> 00:01:40,040
changer though is the fact that C++
 

99
00:01:40,040 --> 00:01:41,749
changer though is the fact that C++
supports object-oriented programming

100
00:01:41,749 --> 00:01:41,759
supports object-oriented programming
 

101
00:01:41,759 --> 00:01:44,069
supports object-oriented programming
with classes a class is just a blueprint

102
00:01:44,069 --> 00:01:44,079
with classes a class is just a blueprint
 

103
00:01:44,079 --> 00:01:46,030
with classes a class is just a blueprint
for an object inside a class you can

104
00:01:46,030 --> 00:01:46,040
for an object inside a class you can
 

105
00:01:46,040 --> 00:01:47,789
for an object inside a class you can
Define attributes and methods that will

106
00:01:47,789 --> 00:01:47,799
Define attributes and methods that will
 

107
00:01:47,799 --> 00:01:49,550
Define attributes and methods that will
be private by default or make them

108
00:01:49,550 --> 00:01:49,560
be private by default or make them
 

109
00:01:49,560 --> 00:01:51,350
be private by default or make them
public by adding them under the public

110
00:01:51,350 --> 00:01:51,360
public by adding them under the public
 

111
00:01:51,360 --> 00:01:53,469
public by adding them under the public
specifier it's also possible to Define

112
00:01:53,469 --> 00:01:53,479
specifier it's also possible to Define
 

113
00:01:53,479 --> 00:01:55,389
specifier it's also possible to Define
methods outside the class definition

114
00:01:55,389 --> 00:01:55,399
methods outside the class definition
 

115
00:01:55,399 --> 00:01:57,469
methods outside the class definition
using a double colon methods can also be

116
00:01:57,469 --> 00:01:57,479
using a double colon methods can also be
 

117
00:01:57,479 --> 00:01:58,910
using a double colon methods can also be
defined multiple times with different

118
00:01:58,910 --> 00:01:58,920
defined multiple times with different
 

119
00:01:58,920 --> 00:02:01,069
defined multiple times with different
parameters which is known as overloading

120
00:02:01,069 --> 00:02:01,079
parameters which is known as overloading
 

121
00:02:01,079 --> 00:02:02,830
parameters which is known as overloading
and is a form of polymorphism in

122
00:02:02,830 --> 00:02:02,840
and is a form of polymorphism in
 

123
00:02:02,840 --> 00:02:04,830
and is a form of polymorphism in
addition we can Define Constructors and

124
00:02:04,830 --> 00:02:04,840
addition we can Define Constructors and
 

125
00:02:04,840 --> 00:02:06,910
addition we can Define Constructors and
destructors to run code when an object

126
00:02:06,910 --> 00:02:06,920
destructors to run code when an object
 

127
00:02:06,920 --> 00:02:08,990
destructors to run code when an object
is created or destroy classes also

128
00:02:08,990 --> 00:02:09,000
is created or destroy classes also
 

129
00:02:09,000 --> 00:02:10,790
is created or destroy classes also
support inheritance allowing developers

130
00:02:10,790 --> 00:02:10,800
support inheritance allowing developers
 

131
00:02:10,800 --> 00:02:12,270
support inheritance allowing developers
to more efficiently share logic

132
00:02:12,270 --> 00:02:12,280
to more efficiently share logic
 

133
00:02:12,280 --> 00:02:13,990
to more efficiently share logic
throughout a program to instantiate an

134
00:02:13,990 --> 00:02:14,000
throughout a program to instantiate an
 

135
00:02:14,000 --> 00:02:15,790
throughout a program to instantiate an
object type the class name followed by

136
00:02:15,790 --> 00:02:15,800
object type the class name followed by
 

137
00:02:15,800 --> 00:02:17,550
object type the class name followed by
the name of your object and optionally

138
00:02:17,550 --> 00:02:17,560
the name of your object and optionally
 

139
00:02:17,560 --> 00:02:19,309
the name of your object and optionally
any parameters for the Constructor when

140
00:02:19,309 --> 00:02:19,319
any parameters for the Constructor when
 

141
00:02:19,319 --> 00:02:21,030
any parameters for the Constructor when
it comes to memory we could manage

142
00:02:21,030 --> 00:02:21,040
it comes to memory we could manage
 

143
00:02:21,040 --> 00:02:22,830
it comes to memory we could manage
everything manually with pointers and

144
00:02:22,830 --> 00:02:22,840
everything manually with pointers and
 

145
00:02:22,840 --> 00:02:24,869
everything manually with pointers and
references however tools like unique

146
00:02:24,869 --> 00:02:24,879
references however tools like unique
 

147
00:02:24,879 --> 00:02:26,550
references however tools like unique
pointer can get the job done in a way

148
00:02:26,550 --> 00:02:26,560
pointer can get the job done in a way
 

149
00:02:26,560 --> 00:02:28,750
pointer can get the job done in a way
that's easier and safer by ensuring that

150
00:02:28,750 --> 00:02:28,760
that's easier and safer by ensuring that
 

151
00:02:28,760 --> 00:02:30,470
that's easier and safer by ensuring that
only one object can be allocated to

152
00:02:30,470 --> 00:02:30,480
only one object can be allocated to
 

153
00:02:30,480 --> 00:02:32,350
only one object can be allocated to
memory now to run your code open up the

154
00:02:32,350 --> 00:02:32,360
memory now to run your code open up the
 

155
00:02:32,360 --> 00:02:34,869
memory now to run your code open up the
terminal and use a tool like clang ++ to

156
00:02:34,869 --> 00:02:34,879
terminal and use a tool like clang ++ to
 

157
00:02:34,879 --> 00:02:38,589
terminal and use a tool like clang ++ to
compile it this has been C++ in 100

158
00:02:38,589 --> 00:02:38,599
compile it this has been C++ in 100
 

159
00:02:38,599 --> 00:02:39,830
compile it this has been C++ in 100
seconds hit the like button and

160
00:02:39,830 --> 00:02:39,840
seconds hit the like button and
 

161
00:02:39,840 --> 00:02:41,190
seconds hit the like button and
subscribe if you want to see more short

162
00:02:41,190 --> 00:02:41,200
subscribe if you want to see more short
 

163
00:02:41,200 --> 00:02:43,030
subscribe if you want to see more short
videos like this thanks for watching and

164
00:02:43,030 --> 00:02:43,040
videos like this thanks for watching and
 

165
00:02:43,040 --> 00:02:47,200
videos like this thanks for watching and
I will see you in the next one

