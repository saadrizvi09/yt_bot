1
00:00:00,000 --> 00:00:00,550

[Music]

2
00:00:00,550 --> 00:00:00,560
[Music]
 

3
00:00:00,560 --> 00:00:02,629
[Music]
ruby a dynamic interpreted scripting

4
00:00:02,629 --> 00:00:02,639
ruby a dynamic interpreted scripting
 

5
00:00:02,639 --> 00:00:04,230
ruby a dynamic interpreted scripting
language made famous for taking

6
00:00:04,230 --> 00:00:04,240
language made famous for taking
 

7
00:00:04,240 --> 00:00:06,309
language made famous for taking
simplicity and code readability to the

8
00:00:06,309 --> 00:00:06,319
simplicity and code readability to the
 

9
00:00:06,319 --> 00:00:07,909
simplicity and code readability to the
extreme it was first conceived by

10
00:00:07,909 --> 00:00:07,919
extreme it was first conceived by
 

11
00:00:07,919 --> 00:00:11,669
extreme it was first conceived by
yukihiro matsumoto aka mats in 1993 as

12
00:00:11,669 --> 00:00:11,679
yukihiro matsumoto aka mats in 1993 as
 

13
00:00:11,679 --> 00:00:13,270
yukihiro matsumoto aka mats in 1993 as
an easy-to-use scripting language like

14
00:00:13,270 --> 00:00:13,280
an easy-to-use scripting language like
 

15
00:00:13,280 --> 00:00:15,509
an easy-to-use scripting language like
python but with genuine object-oriented

16
00:00:15,509 --> 00:00:15,519
python but with genuine object-oriented
 

17
00:00:15,519 --> 00:00:17,430
python but with genuine object-oriented
features like smalltalk it exploded in

18
00:00:17,430 --> 00:00:17,440
features like smalltalk it exploded in
 

19
00:00:17,440 --> 00:00:19,910
features like smalltalk it exploded in
popularity after david hanemeyer hansen

20
00:00:19,910 --> 00:00:19,920
popularity after david hanemeyer hansen
 

21
00:00:19,920 --> 00:00:23,750
popularity after david hanemeyer hansen
aka dhh created rails in 2005 a model

22
00:00:23,750 --> 00:00:23,760
aka dhh created rails in 2005 a model
 

23
00:00:23,760 --> 00:00:25,509
aka dhh created rails in 2005 a model
view controller framework at the time it

24
00:00:25,509 --> 00:00:25,519
view controller framework at the time it
 

25
00:00:25,519 --> 00:00:27,349
view controller framework at the time it
was a game changer for startups because

26
00:00:27,349 --> 00:00:27,359
was a game changer for startups because
 

27
00:00:27,359 --> 00:00:29,029
was a game changer for startups because
it reduced the complexity required to

28
00:00:29,029 --> 00:00:29,039
it reduced the complexity required to
 

29
00:00:29,039 --> 00:00:30,870
it reduced the complexity required to
build a full stack web application and

30
00:00:30,870 --> 00:00:30,880
build a full stack web application and
 

31
00:00:30,880 --> 00:00:32,389
build a full stack web application and
has been used to build unicorns like

32
00:00:32,389 --> 00:00:32,399
has been used to build unicorns like
 

33
00:00:32,399 --> 00:00:34,950
has been used to build unicorns like
twitter shopify github and airbnb just

34
00:00:34,950 --> 00:00:34,960
twitter shopify github and airbnb just
 

35
00:00:34,960 --> 00:00:36,790
twitter shopify github and airbnb just
to name a few ruby is often called a

36
00:00:36,790 --> 00:00:36,800
to name a few ruby is often called a
 

37
00:00:36,800 --> 00:00:38,389
to name a few ruby is often called a
programmer's best friend thanks to its

38
00:00:38,389 --> 00:00:38,399
programmer's best friend thanks to its
 

39
00:00:38,399 --> 00:00:40,389
programmer's best friend thanks to its
minimal syntax that relies on plain

40
00:00:40,389 --> 00:00:40,399
minimal syntax that relies on plain
 

41
00:00:40,399 --> 00:00:42,310
minimal syntax that relies on plain
english words and the use of blocks to

42
00:00:42,310 --> 00:00:42,320
english words and the use of blocks to
 

43
00:00:42,320 --> 00:00:44,310
english words and the use of blocks to
write concise functional code at the

44
00:00:44,310 --> 00:00:44,320
write concise functional code at the
 

45
00:00:44,320 --> 00:00:46,389
write concise functional code at the
same time it's a true object-oriented

46
00:00:46,389 --> 00:00:46,399
same time it's a true object-oriented
 

47
00:00:46,399 --> 00:00:48,310
same time it's a true object-oriented
language where everything is an object

48
00:00:48,310 --> 00:00:48,320
language where everything is an object
 

49
00:00:48,320 --> 00:00:50,389
language where everything is an object
and every object can be modified giving

50
00:00:50,389 --> 00:00:50,399
and every object can be modified giving
 

51
00:00:50,399 --> 00:00:52,549
and every object can be modified giving
developers the flexibility to extend or

52
00:00:52,549 --> 00:00:52,559
developers the flexibility to extend or
 

53
00:00:52,559 --> 00:00:54,389
developers the flexibility to extend or
modify the behavior of the underlying

54
00:00:54,389 --> 00:00:54,399
modify the behavior of the underlying
 

55
00:00:54,399 --> 00:00:56,389
modify the behavior of the underlying
language the developer ecosystem is

56
00:00:56,389 --> 00:00:56,399
language the developer ecosystem is
 

57
00:00:56,399 --> 00:00:58,150
language the developer ecosystem is
large and mature code is shared between

58
00:00:58,150 --> 00:00:58,160
large and mature code is shared between
 

59
00:00:58,160 --> 00:00:59,990
large and mature code is shared between
developers with the rubygems package

60
00:00:59,990 --> 00:01:00,000
developers with the rubygems package
 

61
00:01:00,000 --> 00:01:01,910
developers with the rubygems package
manager where a program is organized

62
00:01:01,910 --> 00:01:01,920
manager where a program is organized
 

63
00:01:01,920 --> 00:01:03,590
manager where a program is organized
into a self-contained format called a

64
00:01:03,590 --> 00:01:03,600
into a self-contained format called a
 

65
00:01:03,600 --> 00:01:05,830
into a self-contained format called a
gem to get started install ruby then

66
00:01:05,830 --> 00:01:05,840
gem to get started install ruby then
 

67
00:01:05,840 --> 00:01:08,390
gem to get started install ruby then
create a file ending in rb to declare a

68
00:01:08,390 --> 00:01:08,400
create a file ending in rb to declare a
 

69
00:01:08,400 --> 00:01:10,230
create a file ending in rb to declare a
local variable give it a name followed

70
00:01:10,230 --> 00:01:10,240
local variable give it a name followed
 

71
00:01:10,240 --> 00:01:12,070
local variable give it a name followed
by a value there's no variable keyword

72
00:01:12,070 --> 00:01:12,080
by a value there's no variable keyword
 

73
00:01:12,080 --> 00:01:14,070
by a value there's no variable keyword
but you can define constants in all caps

74
00:01:14,070 --> 00:01:14,080
but you can define constants in all caps
 

75
00:01:14,080 --> 00:01:16,149
but you can define constants in all caps
or global variables with a dollar sign

76
00:01:16,149 --> 00:01:16,159
or global variables with a dollar sign
 

77
00:01:16,159 --> 00:01:18,070
or global variables with a dollar sign
every value is an instance of an object

78
00:01:18,070 --> 00:01:18,080
every value is an instance of an object
 

79
00:01:18,080 --> 00:01:19,749
every value is an instance of an object
which means we can call methods directly

80
00:01:19,749 --> 00:01:19,759
which means we can call methods directly
 

81
00:01:19,759 --> 00:01:21,830
which means we can call methods directly
on a string like so and parentheses are

82
00:01:21,830 --> 00:01:21,840
on a string like so and parentheses are
 

83
00:01:21,840 --> 00:01:23,749
on a string like so and parentheses are
usually optional ruby is dynamically

84
00:01:23,749 --> 00:01:23,759
usually optional ruby is dynamically
 

85
00:01:23,759 --> 00:01:25,030
usually optional ruby is dynamically
typed which means there's no type

86
00:01:25,030 --> 00:01:25,040
typed which means there's no type
 

87
00:01:25,040 --> 00:01:27,109
typed which means there's no type
annotations however modern tools like

88
00:01:27,109 --> 00:01:27,119
annotations however modern tools like
 

89
00:01:27,119 --> 00:01:29,429
annotations however modern tools like
rbs can add a type system on top of it

90
00:01:29,429 --> 00:01:29,439
rbs can add a type system on top of it
 

91
00:01:29,439 --> 00:01:30,789
rbs can add a type system on top of it
kind of like how typescript does for

92
00:01:30,789 --> 00:01:30,799
kind of like how typescript does for
 

93
00:01:30,799 --> 00:01:32,630
kind of like how typescript does for
javascript now to print a value to the

94
00:01:32,630 --> 00:01:32,640
javascript now to print a value to the
 

95
00:01:32,640 --> 00:01:34,870
javascript now to print a value to the
standard output use the puts method we

96
00:01:34,870 --> 00:01:34,880
standard output use the puts method we
 

97
00:01:34,880 --> 00:01:36,630
standard output use the puts method we
can define our own custom methods using

98
00:01:36,630 --> 00:01:36,640
can define our own custom methods using
 

99
00:01:36,640 --> 00:01:38,550
can define our own custom methods using
the def keyword which end with the end

100
00:01:38,550 --> 00:01:38,560
the def keyword which end with the end
 

101
00:01:38,560 --> 00:01:40,390
the def keyword which end with the end
keyword every method will always return

102
00:01:40,390 --> 00:01:40,400
keyword every method will always return
 

103
00:01:40,400 --> 00:01:42,630
keyword every method will always return
exactly one object no return keyword is

104
00:01:42,630 --> 00:01:42,640
exactly one object no return keyword is
 

105
00:01:42,640 --> 00:01:44,469
exactly one object no return keyword is
necessary or if you don't want a named

106
00:01:44,469 --> 00:01:44,479
necessary or if you don't want a named
 

107
00:01:44,479 --> 00:01:46,230
necessary or if you don't want a named
method you might create a block with a

108
00:01:46,230 --> 00:01:46,240
method you might create a block with a
 

109
00:01:46,240 --> 00:01:48,149
method you might create a block with a
do keyword which works like an anonymous

110
00:01:48,149 --> 00:01:48,159
do keyword which works like an anonymous
 

111
00:01:48,159 --> 00:01:50,230
do keyword which works like an anonymous
function blocks can also take arguments

112
00:01:50,230 --> 00:01:50,240
function blocks can also take arguments
 

113
00:01:50,240 --> 00:01:52,310
function blocks can also take arguments
found in between the pipe characters now

114
00:01:52,310 --> 00:01:52,320
found in between the pipe characters now
 

115
00:01:52,320 --> 00:01:53,749
found in between the pipe characters now
use the class keyword to create

116
00:01:53,749 --> 00:01:53,759
use the class keyword to create
 

117
00:01:53,759 --> 00:01:55,830
use the class keyword to create
blueprints for your own custom objects

118
00:01:55,830 --> 00:01:55,840
blueprints for your own custom objects
 

119
00:01:55,840 --> 00:01:57,350
blueprints for your own custom objects
an interesting point is that ruby

120
00:01:57,350 --> 00:01:57,360
an interesting point is that ruby
 

121
00:01:57,360 --> 00:01:59,109
an interesting point is that ruby
supports duct typing which means that if

122
00:01:59,109 --> 00:01:59,119
supports duct typing which means that if
 

123
00:01:59,119 --> 00:02:00,630
supports duct typing which means that if
it walks like a duck and quacks like a

124
00:02:00,630 --> 00:02:00,640
it walks like a duck and quacks like a
 

125
00:02:00,640 --> 00:02:02,389
it walks like a duck and quacks like a
duck then it's a duck in other words it

126
00:02:02,389 --> 00:02:02,399
duck then it's a duck in other words it
 

127
00:02:02,399 --> 00:02:03,749
duck then it's a duck in other words it
won't throw type errors based on the

128
00:02:03,749 --> 00:02:03,759
won't throw type errors based on the
 

129
00:02:03,759 --> 00:02:05,510
won't throw type errors based on the
class itself but rather the methods that

130
00:02:05,510 --> 00:02:05,520
class itself but rather the methods that
 

131
00:02:05,520 --> 00:02:06,870
class itself but rather the methods that
are implemented on it define the

132
00:02:06,870 --> 00:02:06,880
are implemented on it define the
 

133
00:02:06,880 --> 00:02:08,869
are implemented on it define the
initialize method to run code when a new

134
00:02:08,869 --> 00:02:08,879
initialize method to run code when a new
 

135
00:02:08,879 --> 00:02:10,710
initialize method to run code when a new
object is constructed any variable that

136
00:02:10,710 --> 00:02:10,720
object is constructed any variable that
 

137
00:02:10,720 --> 00:02:12,550
object is constructed any variable that
starts with at belongs to an object

138
00:02:12,550 --> 00:02:12,560
starts with at belongs to an object
 

139
00:02:12,560 --> 00:02:14,229
starts with at belongs to an object
instance while any variable with a

140
00:02:14,229 --> 00:02:14,239
instance while any variable with a
 

141
00:02:14,239 --> 00:02:16,229
instance while any variable with a
double at is static and belongs to the

142
00:02:16,229 --> 00:02:16,239
double at is static and belongs to the
 

143
00:02:16,239 --> 00:02:18,229
double at is static and belongs to the
class itself you can easily add getters

144
00:02:18,229 --> 00:02:18,239
class itself you can easily add getters
 

145
00:02:18,239 --> 00:02:19,589
class itself you can easily add getters
and setters to a class using the

146
00:02:19,589 --> 00:02:19,599
and setters to a class using the
 

147
00:02:19,599 --> 00:02:21,589
and setters to a class using the
attribute accessor method and now we can

148
00:02:21,589 --> 00:02:21,599
attribute accessor method and now we can
 

149
00:02:21,599 --> 00:02:23,350
attribute accessor method and now we can
create a new object instance by calling

150
00:02:23,350 --> 00:02:23,360
create a new object instance by calling
 

151
00:02:23,360 --> 00:02:25,350
create a new object instance by calling
the new method on the class now run your

152
00:02:25,350 --> 00:02:25,360
the new method on the class now run your
 

153
00:02:25,360 --> 00:02:26,790
the new method on the class now run your
code with the ruby interpreter from the

154
00:02:26,790 --> 00:02:26,800
code with the ruby interpreter from the
 

155
00:02:26,800 --> 00:02:28,790
code with the ruby interpreter from the
terminal this has been ruby in 100

156
00:02:28,790 --> 00:02:28,800
terminal this has been ruby in 100
 

157
00:02:28,800 --> 00:02:30,229
terminal this has been ruby in 100
seconds hit the like button and

158
00:02:30,229 --> 00:02:30,239
seconds hit the like button and
 

159
00:02:30,239 --> 00:02:31,670
seconds hit the like button and
subscribe if you want to see more short

160
00:02:31,670 --> 00:02:31,680
subscribe if you want to see more short
 

161
00:02:31,680 --> 00:02:33,509
subscribe if you want to see more short
videos like this thanks for watching and

162
00:02:33,509 --> 00:02:33,519
videos like this thanks for watching and
 

163
00:02:33,519 --> 00:02:37,720
videos like this thanks for watching and
i will see you in the next one

