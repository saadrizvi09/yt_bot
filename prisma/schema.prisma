// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id           String    @id
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  emailAddress String    @unique
  passwordHash String
  firstName    String
  lastName     String?
  
  videos       Video[]
  questions    VideoQuestion[]
}

model Video {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  youtubeUrl  String    @unique
  videoId     String    @unique
  title       String
  duration    Int       // seconds
  transcript  String?   // backup storage
  
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  embeddings  VideoEmbedding[]
  questions   VideoQuestion[]
}

model VideoEmbedding {
  id                String  @id @default(cuid())
  
  chunkEmbedding    Unsupported("vector(768)")
  chunkText         String
  chunkIndex        Int
  startTime         Float?
  endTime           Float?
  
  videoId           String
  video             Video   @relation(fields: [videoId], references: [id])
  
  @@index([videoId, chunkIndex])
}

model VideoQuestion {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  
  question    String
  answer      String
  context     Json?     // relevant chunks
  
  videoId     String
  video       Video     @relation(fields: [videoId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}
